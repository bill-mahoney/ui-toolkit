!function(e,t){for(var i in t)e[i]=t[i]}(exports,function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=64)}([function(e,t){e.exports=require("react")},function(e,t,i){"use strict";i.d(t,"a",(function(){return l})),i.d(t,"f",(function(){return d})),i.d(t,"i",(function(){return c})),i.d(t,"h",(function(){return p})),i.d(t,"j",(function(){return u})),i.d(t,"k",(function(){return g})),i.d(t,"b",(function(){return h})),i.d(t,"d",(function(){return f})),i.d(t,"g",(function(){return x})),i.d(t,"c",(function(){return y})),i.d(t,"l",(function(){return w})),i.d(t,"m",(function(){return A})),i.d(t,"e",(function(){return C}));var n=i(17),o=i.n(n),r=i(18),a=i.n(r);const s=e=>Array.isArray(e)?e.map(s):null!==e&&C("object"==typeof e)?Object.entries(e).reduce((e,[t,i])=>(e[a()(t)]=s(i),e),{}):e,l=(e,t)=>((e,t)=>Object.keys(t).reduce((i,n)=>o.a.copy(n,t[n],e,i),{}))(s(e),t),d=e=>"function"==typeof e,c=e=>e>=8&&e<=32,p=e=>new RegExp("^[a-zA-Z0-9$@$!%*#?&-_~^]+$").test(e),u=e=>new RegExp("^(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9$@$!%*#?&-_~^]{8,32}$").test(e),g=e=>new RegExp("^(102[4-9]|10[3-9][0-9]|1[1-9][0-9]{2}|[2-9][0-9]{3}|[1-3][0-9]{4}|4[0-8][0-9]{3}|490[0-9]{2}|491[0-4][0-9]|4915[01])$").test(e),h=e=>!C(e)||new RegExp("[^a-zA-Z0-9._-]").test(e),f=(e,t)=>3===e?m(t):6===e?v(t):201===e?b(t):"",m=e=>new RegExp("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$").test(e),v=e=>new RegExp("^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$").test(e),b=e=>/^(?=.{1,254}$)((?=[a-z0-9-]{1,63}\.)(xn--+)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/.test(e),x=(...e)=>e.filter(e=>!!C(e)).join(" ").trim(),y=e=>{const t={"#":"%23","%":"%25"};return e.replace(/#|%/g,e=>t[e])},w=(e,t)=>{const i={Accept:"application/json","Content-Type":"application/json"};return C(t)?i["X-MPS-API-Key"]=e:i["X-RPS-API-Key"]=e,i},A=e=>!!C(/(\.pfx)$/i.exec(e)),C=e=>null!=e&&""!==e&&!1!==e&&0!==e},function(e,t,i){"use strict";i.d(t,"a",(function(){return a})),i.d(t,"c",(function(){return s})),i.d(t,"b",(function(){return l}));var n=i(11),o=i.n(n),r=i(1);const a=e=>e.map(e=>{const t=Object.assign({},e.headerComponentParams),i=Object(r.e)(e.headerName)?o.a.t(e.headerName):void 0,n=Object(r.e)(e.headerTooltip)?o.a.t(e.headerTooltip):i;return t.description=Object(r.e)(e.headerComponentParams)&&Object(r.e)(e.headerComponentParams.description)?o.a.t(e.headerComponentParams.description):i,Object.assign(Object.assign({},e),{headerName:i,headerComponentParams:t,headerTooltip:n})}),s=e=>o.a.t(e),l=(e,t)=>o.a.t(e,{translate:t})},,function(e,t){e.exports=require("@fortawesome/react-fontawesome")},,function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(1),o=function(e,t,i,n){return new(i||(i=Promise))((function(o,r){function a(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};class r{static get(e,t,i={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(t);return yield r.fetch(e,Object.assign(Object.assign({},i),{method:"GET",headers:o}))}))}static post(e,t={},i,a,s={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(i,a);return Object(n.e)(a)?yield r.fetch(e,Object.assign(Object.assign({},s),{method:"POST",body:t,headers:o})):yield r.fetchRPS(e,Object.assign(Object.assign({},s),{method:"POST",body:t,headers:o}))}))}static delete(e,t,i={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(t);return yield r.fetchRPS(e,Object.assign(Object.assign({},i),{method:"DELETE",headers:o}))}))}static patch(e,t={},i,a={}){return o(this,void 0,void 0,(function*(){const o=Object(n.l)(i);return yield r.fetchRPS(e,Object.assign(Object.assign({},a),{method:"PATCH",body:t,headers:o}))}))}static fetch(e,t={}){return o(this,void 0,void 0,(function*(){return t.mode="cors",t.credentials="include",t.withCredentials=!0,yield fetch(e,t).then(e=>o(this,void 0,void 0,(function*(){return yield e.json()})))}))}static fetchRPS(e,t={}){return o(this,void 0,void 0,(function*(){return yield fetch(e,t).then(e=>o(this,void 0,void 0,(function*(){return yield e.text()})))}))}}},function(e,t,i){"use strict";i.d(t,"b",(function(){return r})),i.d(t,"c",(function(){return a})),i.d(t,"a",(function(){return s}));var n=i(0),o=i.n(n);const r=o.a.createContext({data:{}});class a extends o.a.Component{render(){return o.a.createElement(r.Provider,{value:{data:this.props.data}},this.props.children)}}const s=({children:e})=>o.a.createElement(r.Consumer,null,e)},function(e,t,i){"use strict";var n=i(0),o=i.n(n),r=i(12);const a=i.n(r).a.div`
display: block;
position: fixed;
text-align: center;
bottom: 0;
left: 40%;
background: ${({type:e})=>s(e)};
border: ${({type:e})=>"1px solid "+s(e)};
margin: 10px;
padding: 10px;position: absolute;
color: #fff; 
font-weight:500;
z-index:1;
`,s=e=>"success"===e?"#4caf50":"warning"===e?"#ff9800":"error"===e?"#f44336":"#000000";t.a=({message:e,type:t})=>o.a.createElement(a,{type:t},e)},function(e,t,i){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),a=[];function s(e){for(var t=-1,i=0;i<a.length;i++)if(a[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],o=0;o<e.length;o++){var r=e[o],l=t.base?r[0]+t.base:r[0],d=i[l]||0,c="".concat(l," ").concat(d);i[l]=d+1;var p=s(c),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==p?(a[p].references++,a[p].updater(u)):a.push({identifier:c,updater:m(u,t),references:1}),n.push(c)}return n}function d(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,p=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function g(e,t,i){var n=i.css,o=i.media,r=i.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,f=0;function m(e,t){var i,n,o;if(t.singleton){var r=f++;i=h||(h=d(t)),n=u.bind(null,i,r,!1),o=u.bind(null,i,r,!0)}else i=d(t),n=g.bind(null,i,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var o=s(i[n]);a[o].references--}for(var r=l(e,t),d=0;d<i.length;d++){var c=s(i[d]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}i=r}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var o=(a=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(r).concat([o]).join("\n")}var a,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports=require("i18next")},function(e,t){e.exports=require("styled-components")},,function(e,t){e.exports=require("@fortawesome/free-solid-svg-icons")},,function(e,t){e.exports=require("@fortawesome/fontawesome-svg-core")},function(e,t){e.exports=require("dot-object")},function(e,t){e.exports=require("camelcase")},,,,function(e,t){e.exports=require("ag-grid-react")},,,,function(e,t){e.exports=require("ag-grid-community/dist/styles/ag-grid.css")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("export-to-csv")},,,,,,function(e,t,i){"use strict";i.r(t),i.d(t,"AuditLog",(function(){return E}));var n=i(0),o=i(22),r=i(57),a=i.n(r),s=i(1);const l={checkForEmpty:(e,t="---")=>e||t},{checkForEmpty:d}=l,c={auditappid:{headerName:"auditLog.grid.column.auditappid",field:"auditAppId",headerComponentParams:{description:"auditLog.grid.column.auditappiddescription"}},eventid:{headerName:"auditLog.grid.column.eventId",field:"eventId",headerComponentParams:{description:"auditLog.grid.column.eventIddescription"}},initiatortype:{headerName:"auditLog.grid.column.initiatortype",field:"initiatorType"},auditapp:{headerName:"auditLog.grid.column.auditapp",field:"auditApp",headerComponentParams:{description:"auditLog.grid.column.auditappdescription",enableSorting:!0},tooltipField:"auditApp",minWidth:150},event:{headerName:"auditLog.grid.column.event",field:"event",headerComponentParams:{description:"auditLog.grid.column.eventdescription"},tooltipField:"event",minWidth:150},initiator:{headerName:"auditLog.grid.column.initiator",field:"initiator",headerComponentParams:{description:"auditLog.grid.column.initiatordescription"},minWidth:150},time:{headerName:"auditLog.grid.column.time",field:"time",cellRendererFramework:({value:e})=>(e=>{if(Object(s.e)(e)){const t=a.a.utc(e).local();return d(t.unix()>0?t.format("YYYY-MM-DD HH:mm"):"")}return e})(e)||"",headerComponentParams:{description:"auditLog.grid.column.timedescription"},minWidth:150},mclocationtype:{headerName:"auditLog.grid.column.mclocationtype",field:"mCLocationType",headerComponentParams:{description:"auditLog.grid.column.mclocationtypedescription"}},netaddress:{headerName:"auditLog.grid.column.netaddress",field:"netAddress",headerComponentParams:{description:"auditLog.grid.column.netaddressdescription"},minWidth:150},exstr:{headerName:"auditLog.grid.column.exstr",field:"exStr",headerComponentParams:{description:"auditLog.grid.column.exstrdescription"},minWidth:150}},p={auditAppId:"auditAppId",eventId:"eventId",initiator:"initiator",time:"time",auditApp:"auditApp",event:"event",netAddress:"netAddress",exStr:"exStr"};var u=i(6);i(71);const g=e=>n.createElement("div",{className:"tooltip"},n.createElement("span",{style:e.styles,id:"tooltip-content",className:"tooltip__text"},e.message));var h=i(4);class f extends n.Component{constructor(e){super(e),this.tooltipStyles={},this.adjustTooltipStyle=()=>{this.tooltipStyles.left=0,this.tooltipStyles.marginLeft=0,this.tooltipStyles.width="130px",this.props.description.length<34?this.tooltipStyles.top="-48px":this.props.description.length<68?this.tooltipStyles.top="-64px":this.tooltipStyles.top="-68px"},this.prepareTooltipStyle=e=>{const t=document.getElementById("grid-wrapper").getBoundingClientRect().left,i=e.target.getBoundingClientRect();this.tooltipStyles={},this.tooltipStyles.position="fixed",this.tooltipStyles.left=i.left-(100+i.width/2)-t,this.props.description.length<34?this.tooltipStyles.top="-30px":this.props.description.length<68?this.tooltipStyles.top="-48px":this.tooltipStyles.top="-60px",this.tooltipStyles.left<0&&this.adjustTooltipStyle()},this.handleMouseClick=e=>{this.prepareTooltipStyle(e),this.setState((e,t)=>({isMouseOver:!0,message:t.description}))},this.handleMouseLeave=()=>{this.setState((e,t)=>({isMouseOver:!1,message:""}))},this.state={isMouseOver:!1,message:""}}render(){const e=n.createElement("div",{className:"customHeaderMenuButton "+this.props.displayName,onClick:this.handleMouseClick,onMouseLeave:this.handleMouseLeave},n.createElement(h.FontAwesomeIcon,{className:this.props.displayName,icon:"info-circle"}));return n.createElement(n.Fragment,null,this.state.isMouseOver&&n.createElement(g,{message:this.state.message,styles:this.tooltipStyles}),n.createElement("div",{style:{display:"flex"}},this.props.displayName,"   ",e))}}i(73);class m extends n.Component{getReactContainerClasses(){return["custom-tooltip"]}render(){const{api:e,rowIndex:t,column:i}=this.props,o=Object(s.e)(e.getDisplayedRowAtIndex(t))?e.getDisplayedRowAtIndex(t).data:"",r="auditApp"===i.colDef.field,a="event"===i.colDef.field;return n.createElement(n.Fragment,null,r&&Object(s.e)(o)?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Role Name:",o.auditApp)),n.createElement("p",null,n.createElement("span",null,"Role ID: ",o.auditAppId))):null,a&&Object(s.e)(o)?n.createElement("div",{className:"custom-tooltip"},n.createElement("p",null,n.createElement("span",null,"Event: ",o.event)),n.createElement("p",null,n.createElement("span",null,"Event ID: ",o.eventId))):null)}}var v=i(58),b=i(8),x=i(16),y=i(14),w=(i(26),i(75),i(76),i(2)),A=i(7),C=function(e,t,i,n){return new(i||(i=Promise))((function(o,r){function a(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};const P=new v.ExportToCsv({filename:"AuditLog"}),S=Object.keys(y).filter(e=>"fas"!==e&&"prefix"!==e).map(e=>y[e]);x.library.add(...S);class E extends n.Component{constructor(e){super(e),this.disableNext=!1,this.disablePrev=!0,this.disableGoToPage=!1,this.adjustRowIndex=(e,t)=>t>e?1:Math.abs(e-(t-1)),this.transformResponse=e=>(e.forEach(e=>{e.netAddress=e.netAddress.replace(/[^\d.-]/g,""),e.time=e.time.substring(0,e.time.length-5)}),e),this.fetchAuditLog=e=>C(this,void 0,void 0,(function*(){try{const{mpsKey:t}=this.context.data,i=JSON.stringify({apikey:"xxxxx",method:"AuditLog",payload:{guid:this.props.deviceId,startIndex:e}}),n=null!=this.props.mpsServer?this.props.mpsServer:"";return yield u.a.post(`https://${n}/amt`,i,t,!0)}catch(e){console.log("An error occured")}})),this.onGridReady=e=>{let t=0,i=0;const n="Sorry! Something went wrong. try again later";this.gridApi=e.api,this.gridColumnApi=e.columnApi,this.gridApi.sizeColumnsToFit();const o={rowCount:null,getRows:e=>{this.gridApi.showLoadingOverlay(),0===i?this.fetchAuditLog(e.startRow).then(n=>{void 0!==n.records?(n.records=this.transformResponse(n.records.map(e=>Object(s.a)(e,p))),this.gridApi.hideOverlay(),e.successCallback(n.records.reverse(),n.totalCnt),t=n.totalCnt,i=t-20):(this.setState({errorMsg:n.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay())}).catch(()=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}):(i=this.adjustRowIndex(t,e.endRow),this.fetchAuditLog(i).then(i=>{if(void 0!==i.records){if(i.records=this.transformResponse(i.records.map(e=>Object(s.a)(e,p))),this.gridApi.hideOverlay(),this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1){const e=t%10;t%10>0&&(i.records=i.records.slice(0,e))}e.successCallback(i.records.reverse(),i.totalCnt),t=i.totalCnt}else this.setState({errorMsg:i.error}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}).catch(()=>{this.setState({errorMsg:n}),this.gridApi.hideOverlay(),this.gridApi.showNoRowsOverlay()}))}};e.api.setDatasource(o)},this.fetchCompleteAuditLog=()=>C(this,void 0,void 0,(function*(){const e=this.gridApi.paginationGetRowCount();let t=[{auditAppId:"Role ID",eventId:"Event ID",initiator:"Initiator",auditApp:"Role Name",event:"Event",netAddress:"Network Address",time:"Device Time(UTC)",exStr:"Event Details"}];for(let i=0;i<this.gridApi.paginationGetTotalPages();i++){const n=(i+1)*this.gridApi.paginationGetPageSize()-1,o=0===i?0:i+1!==this.gridApi.paginationGetTotalPages()?e-n:1;let r=yield this.fetchAuditLog(o);if(void 0===r.records||Object(s.e)(r.error)){this.setState({hasExportFailed:!0,isExporting:!1,snackBarMessage:"Something went wrong! Please try again later."}),setTimeout(()=>{this.setState({hasExportFailed:!1})},4e3);break}if(1===o){const t=e%10;r.records=r.records.slice(0,t)}r=r.records.map(e=>Object(s.a)(e,p)),t=t.concat(this.transformResponse(r).reverse())}this.setState({isExporting:!1,completeAuditLog:t,downloadCSV:!0}),P.generateCsv(this.state.completeAuditLog)})),this.onGridSizeChanged=e=>{var t;const i=null===(t=document.getElementById("grid-wrapper"))||void 0===t?void 0:t.offsetWidth,n=[],o=[];let r=0;const a=e.columnApi.getAllColumns();for(let e=0;e<a.length;e++){const t=a[e];r+=parseInt(t.getMinWidth()),r>i?o.push(t.colId):n.push(t.colId)}e.columnApi.setColumnsVisible(n,!0),e.columnApi.setColumnsVisible(o,!1),e.api.sizeColumnsToFit()},this.togglePaginationButtons=e=>{switch(e){case"first":this.disablePrev=!0,this.disableNext=!1;break;case"next":this.disablePrev=!1,this.gridApi.paginationGetTotalPages()===parseInt(this.gridApi.paginationGetCurrentPage())+1&&(this.disableNext=!0);break;case"prev":this.disableNext=!1,0===this.gridApi.paginationGetCurrentPage()&&(this.disablePrev=!0);break;case"last":this.disableNext=!0,this.disablePrev=!1;break;case"fromgoto":this.disableNext=!1,this.disablePrev=!1}},this.onPaginationChanged=()=>{Object(s.e)(this.gridApi)&&this.setState({currentPage:parseInt(this.gridApi.paginationGetCurrentPage())+1,totalPages:this.gridApi.paginationGetTotalPages()})},this.goToPage=()=>{this.gridApi.paginationGoToPage(this.state.value-1);const e=parseInt(this.state.value);switch(!0){case e<=1:this.togglePaginationButtons("first");break;case e>1&&e<this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("fromgoto");break;case e>=this.gridApi.paginationGetTotalPages():this.togglePaginationButtons("last")}},this.onBtFirst=()=>{this.gridApi.paginationGoToFirstPage(),this.togglePaginationButtons("first")},this.onBtLast=()=>{this.gridApi.paginationGoToLastPage(),this.togglePaginationButtons("last")},this.onBtNext=()=>{this.gridApi.paginationGoToNextPage(),this.togglePaginationButtons("next")},this.onBtPrevious=()=>{this.gridApi.paginationGoToPreviousPage(),this.togglePaginationButtons("prev")},this.onBtExport=()=>{this.setState((e,t)=>({isExporting:!0})),this.fetchCompleteAuditLog().catch(()=>console.info("error occured"))},this.handleChange=e=>{this.setState({value:e.target.value.replace(/[^\d-]/g,"")})},this.columnDefs=[c.initiator,c.auditapp,c.event,c.netaddress,c.time,c.exstr],this.state={rowData:[],errorMsg:"",value:"",currentPage:0,totalPages:0,showTooltip:!1,isExporting:!1,hasExportFailed:!1,snackBarMessage:"",completeAuditLog:[],downloadCSV:!1}}render(){const e=`<div style={{width: "100%", fontSize: "25px", backgroundColor: "#ed645a"}}><span style="padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow; color: red;">${this.state.errorMsg}</span></div>`,t={agColumnHeader:f,customTooltip:m};return n.createElement(n.Fragment,null,this.state.isExporting?n.createElement("div",{className:"overlay"},n.createElement("div",{className:"overlay__inner"},n.createElement("span",{className:"export-loading-text"},"Please wait while we process the request"),n.createElement("span",{className:"loader"}))):n.createElement("div",null,n.createElement("div",{id:"grid-wrapper",style:{width:"100%",height:"375px"}},n.createElement("div",{className:"ag-theme-balham-dark",style:{height:"100%",width:"100%"}},n.createElement(o.AgGridReact,{columnDefs:Object(w.a)(this.columnDefs),defaultColDef:{tooltipComponent:"customTooltip"},pagination:!0,paginationPageSize:10,cacheBlockSize:10,rowModelType:"infinite",infiniteInitialRowCount:1,onGridReady:this.onGridReady,rowData:this.state.rowData,overlayNoRowsTemplate:e,onPaginationChanged:this.onPaginationChanged,suppressPaginationPanel:!0,suppressScrollOnNewData:!0,onGridSizeChanged:this.onGridSizeChanged,frameworkComponents:t}))),n.createElement("div",{className:"agGrid-footer"},n.createElement("div",{className:"ag-grid-footer-cell align-left"},this.state.showTooltip&&n.createElement(g,{message:"Exports only cached entries",styles:{position:"absolute",bottom:"100%",left:"24px",width:"100px",margin:"0px"}}),n.createElement("button",{className:"export-to-csv",onClick:this.onBtExport},n.createElement(h.FontAwesomeIcon,{icon:"file-export"}),Object(w.c)("auditLog.grid.footer.exporttocsv.title"))),n.createElement("div",{className:"ag-grid-footer-cell agGrid-Paginition align-center"},n.createElement("button",{type:"button",onClick:this.onBtFirst,disabled:this.disablePrev},n.createElement(h.FontAwesomeIcon,{icon:"angle-double-left"})),n.createElement("button",{type:"button",onClick:this.onBtPrevious,disabled:this.disablePrev},n.createElement(h.FontAwesomeIcon,{icon:"angle-left"})),n.createElement("span",null,Object(w.c)("auditLog.grid.footer.pagination.text1")," ",this.state.currentPage," ",Object(w.c)("auditLog.grid.footer.pagination.text2")," ",this.state.totalPages),n.createElement("button",{type:"button",onClick:this.onBtNext,disabled:this.disableNext},n.createElement(h.FontAwesomeIcon,{icon:"angle-right"})),n.createElement("button",{type:"button",onClick:this.onBtLast,disabled:this.disableNext},n.createElement(h.FontAwesomeIcon,{icon:"angle-double-right"}))),n.createElement("div",{className:"ag-grid-footer-cell align-right go-to-page-section"},n.createElement("button",{onClick:this.goToPage,className:"go-to-page"},Object(w.c)("auditLog.grid.footer.gotopage.title")),n.createElement("input",{id:"pagination-page",className:"pagination-input",placeholder:"page #",value:this.state.value,onChange:this.handleChange,type:"text",name:"page__num",disabled:this.disableGoToPage})))),this.state.hasExportFailed&&n.createElement(b.a,{message:this.state.snackBarMessage,type:""}))}}E.contextType=A.b},,,,,,,function(e,t,i){var n=i(9),o=i(72);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1};n(o,r);e.exports=o.locals||{}},function(e,t,i){(t=i(10)(!1)).push([e.i,'.tooltip{position:relative;display:inline;align-content:center}.tooltip .tooltip__text{width:200px;z-index:1;white-space:normal;margin:10px 10px 10px 10px;background:#fff;color:#27394f;padding:4px 8px;font-size:12px;line-height:1.4;min-width:100px;text-align:center;border-radius:6px;border:1px solid #000;transition:opacity 1s}.tooltip .tooltip__text::after{content:"";position:absolute;top:100%;left:50%;margin-left:-5px;border-width:5px;border-style:solid;border-color:#fff transparent transparent transparent}.ag-root-wrapper{overflow:visible !important}.ag-root{overflow:visible !important}.ag-header{overflow:visible !important}.ag-header-viewport{overflow:visible !important}',""]),e.exports=t},function(e,t,i){var n=i(9),o=i(74);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1};n(o,r);e.exports=o.locals||{}},function(e,t,i){(t=i(10)(!1)).push([e.i,".custom-tooltip{position:absolute;border:1px solid #6495ed;color:#000;pointer-events:none;transition:opacity 1s;background-color:#fff}.custom-tooltip.ag-tooltip-hiding{opacity:0}.custom-tooltip p{margin:5px;white-space:nowrap}",""]),e.exports=t},function(e,t){e.exports=require("ag-grid-community/dist/styles/ag-theme-balham-dark.css")},function(e,t,i){var n=i(9),o=i(77);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1};n(o,r);e.exports=o.locals||{}},function(e,t,i){(t=i(10)(!1)).push([e.i,'.agGrid-footer{background:#2d3436;height:26px}.agGrid-footer .ag-grid-footer-cell{width:33%;display:inline-block}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}@keyframes spin{to{-webkit-transform:rotate(360deg)}}@-webkit-keyframes spin{to{-webkit-transform:rotate(360deg)}}.align-left{text-align:left}.align-center{text-align:center}.align-right{text-align:right}.export-to-csv{align-content:left;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;text-decoration:underline;cursor:pointer}.data-export-info-icon{color:#d0d0d0;padding-left:5px;padding-top:4px;font-size:12px}.agGrid-Paginition{display:inline-block}.agGrid-Paginition button{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.agGrid-Paginition button:disabled{color:#8c8c8c;pointer-events:none}.agGrid-Paginition span{align-content:right;color:#f5f5f5;background:#2d3436;border:transparent;font-size:12px;margin:2px;font-weight:400;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}.go-to-page{padding-top:2px;padding-right:4px;align-content:right;color:#f5f5f5;background:#2d3436;border:none !important;font-size:12px;font-weight:400;cursor:pointer;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;outline:none;text-decoration:underline}.pagination-input{float:right;width:75px;margin-top:2px;font-size:12px;background-color:#262c2e;color:#f5f5f5;border:1px solid #f5f5f5;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}::placeholder{color:#f5f5f5}.overlay{margin-top:65px;margin-left:8px;left:0;top:0;width:98.8%;height:400px;position:absolute;background:#000}.overlay__inner{left:0;top:0;width:100%;height:400px;position:absolute}.loader{display:inline-block;position:absolute;width:75px;height:75px;left:45%;top:35%;border:10px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite;-webkit-animation:spin 1s ease-in-out infinite}.export-loading-text{left:38%;top:25%;color:#fff;position:absolute}@keyframes spin{100%{transform:rotate(360deg)}}@media only screen and (min-width: 320px)and (max-width: 479px){.agGrid-footer{height:50px}.agGrid-footer .ag-grid-footer-cell{width:50%}.agGrid-footer .agGrid-Paginition{text-align:right}.agGrid-footer .go-to-page-section{margin:0px 25%;text-align:center}.agGrid-footer .go-to-page-section .pagination-input{float:none}.overlay .export-loading-text{left:14%}.overlay .loader{width:50px;height:50px;left:38%}}',""]),e.exports=t}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NoYXJlZC9VdGlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvTWV0aG9kcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWVcIiIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhY3Rqcy9jb21wb25lbnRzL3NlcnZpY2VzL0h0dHBDbGllbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvY29udGV4dC9CYXNpY0NvbnRleHRQcm92aWRlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvU25hY2tCYXIudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImkxOG5leHRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHlsZWQtY29tcG9uZW50c1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIkBmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImRvdC1vYmplY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjYW1lbGNhc2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhZy1ncmlkLXJlYWN0XCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYWctZ3JpZC1jb21tdW5pdHkvZGlzdC9zdHlsZXMvYWctZ3JpZC5jc3NcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtb21lbnRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHBvcnQtdG8tY3N2XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvVGltZVJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvQXVkaXRMb2cvQXVkaXRMb2dDb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvVG9vbHRpcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9BdWRpdExvZy9DdXN0b21IZWFkZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvQXVkaXRMb2cvQ3VzdG9tVG9vbHRpcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9BdWRpdExvZy9BdWRpdExvZy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvVG9vbHRpcC5zY3NzPzc4MGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9zaGFyZWQvVG9vbHRpcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9yZWFjdGpzL2NvbXBvbmVudHMvQXVkaXRMb2cvQ3VzdG9tVG9vbHRpcC5zY3NzP2RkM2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9BdWRpdExvZy9DdXN0b21Ub29sdGlwLnNjc3MiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYWctZ3JpZC1jb21tdW5pdHkvZGlzdC9zdHlsZXMvYWctdGhlbWUtYmFsaGFtLWRhcmsuY3NzXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9BdWRpdExvZy9BdWRpdExvZy5zY3NzPzg2MWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWN0anMvY29tcG9uZW50cy9BdWRpdExvZy9BdWRpdExvZy5zY3NzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsImNhbWVsQ2FzZUtleXMiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaXNGYWxzeSIsImVudHJpZXMiLCJyZWR1Y2UiLCJhY2MiLCJjYW1lbENhc2VSZXNoYXBlIiwicmVzcG9uc2UiLCJtb2RlbCIsImtleXMiLCJjb3B5IiwicmVzaGFwZSIsImlzRnVuYyIsInBhc3N3b3JkTGVuZ3RoVmFsaWRhdGlvbiIsImxlbmd0aCIsIm5hbWVWYWxpZGF0aW9uIiwiUmVnRXhwIiwidGVzdCIsInBhc3N3b3JkVmFsaWRhdGlvbiIsInBvcnRWYWxpZGF0aW9uIiwiY29tbW9uTmFtZVZhbGlkYXRpb24iLCJpcEFkZHJlc3NWYWxpZGF0aW9uIiwiaXBUeXBlIiwiaXB2NCIsImlwdjYiLCJmcWRuIiwiam9pbkNsYXNzZXMiLCJjbGFzc05hbWVzIiwiZmlsdGVyIiwiam9pbiIsInRyaW0iLCJlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyIsImNvbmZpZ05hbWUiLCJyZXBsYWNlQ2hhcnMiLCJyZXBsYWNlIiwibWF0Y2giLCJwcmVwYXJlSGVhZGVycyIsImFwaUtleSIsImlzTXBzQ29udHJvbCIsImhlYWRlcnMiLCJBY2NlcHQiLCJ2YWxpZGF0ZUZpbGVFeHRlbnNpb25zIiwiZmlsZVBhdGgiLCJleGVjIiwidHJhbnNsYXRlQ29sdW1uRGVmcyIsImNvbHVtbkRlZnMiLCJjb2x1bW5EZWYiLCJoZWFkZXJDb21wb25lbnRQYXJhbXMiLCJhc3NpZ24iLCJoZWFkZXJOYW1lIiwidW5kZWZpbmVkIiwiaGVhZGVyVG9vbHRpcCIsImRlc2NyaXB0aW9uIiwidHJhbnNsYXRlVGV4dCIsInRleHQiLCJ0cmFuc2xhdGVEeW5hbWljVGV4dCIsInRyYW5zbGF0ZSIsIkh0dHBDbGllbnQiLCJ1cmwiLCJvcHRpb25zIiwianNvbkhlYWRlcnMiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJpc01wcyIsImZldGNoUlBTIiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ0aGVuIiwicmVzdWx0IiwianNvbiIsIkRvbWFpbkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiUHJvdmlkZXIiLCJDb21wb25lbnQiLCJ0aGlzIiwicHJvcHMiLCJjaGlsZHJlbiIsIkNvbnN1bWVyIiwiU3R5bGVkQmFyIiwiZGl2IiwidHlwZSIsImdldENvbG9ycyIsIm1lc3NhZ2UiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsInRvU3RyaW5nIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJncmlkVmFsdWVGb3JtYXR0ZXJzIiwiY2hlY2tGb3JFbXB0eSIsImVtcHR5VmFsdWUiLCJhdWRpdGxvZ0Nsb3VtbkRlZnMiLCJhdWRpdGFwcGlkIiwiZmllbGQiLCJldmVudGlkIiwiaW5pdGlhdG9ydHlwZSIsImF1ZGl0YXBwIiwiZW5hYmxlU29ydGluZyIsInRvb2x0aXBGaWVsZCIsIm1pbldpZHRoIiwiZXZlbnQiLCJpbml0aWF0b3IiLCJ0aW1lIiwiY2VsbFJlbmRlcmVyRnJhbWV3b3JrIiwidXRjIiwibG9jYWwiLCJ1bml4IiwiZm9ybWF0IiwiZm9ybWF0VGltZSIsIm1jbG9jYXRpb250eXBlIiwibmV0YWRkcmVzcyIsImV4c3RyIiwiYXVkaXRMb2dEYXRhTW9kZWwiLCJhdWRpdEFwcElkIiwiZXZlbnRJZCIsImF1ZGl0QXBwIiwibmV0QWRkcmVzcyIsImV4U3RyIiwiY2xhc3NOYW1lIiwic3R5bGVzIiwic3VwZXIiLCJ0b29sdGlwU3R5bGVzIiwiYWRqdXN0VG9vbHRpcFN0eWxlIiwibGVmdCIsIm1hcmdpbkxlZnQiLCJ3aWR0aCIsInRvcCIsInByZXBhcmVUb29sdGlwU3R5bGUiLCJncmlkTGVmdFBvc2l0aW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWN0IiwicG9zaXRpb24iLCJ0b29sdGlwV2lkdGgiLCJoYW5kbGVNb3VzZUNsaWNrIiwic2V0U3RhdGUiLCJzdGF0ZSIsImlzTW91c2VPdmVyIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1lbnUiLCJkaXNwbGF5TmFtZSIsIm9uQ2xpY2siLCJvbk1vdXNlTGVhdmUiLCJpY29uIiwiZGlzcGxheSIsImFwaSIsInJvd0luZGV4IiwiY29sdW1uIiwiZ2V0RGlzcGxheWVkUm93QXRJbmRleCIsImlzUm9sZU5hbWUiLCJjb2xEZWYiLCJpc0V2ZW50IiwiY3N2RXhwb3J0ZXIiLCJmaWxlbmFtZSIsImljb25MaXN0IiwiYWRkIiwiZGlzYWJsZU5leHQiLCJkaXNhYmxlUHJldiIsImRpc2FibGVHb1RvUGFnZSIsImFkanVzdFJvd0luZGV4Iiwicm93dG90YWxDbnQiLCJlbmRJbmRleCIsIk1hdGgiLCJhYnMiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImF1ZGl0UmVjb3JkcyIsInJlY29yZCIsInN1YnN0cmluZyIsImZldGNoQXVkaXRMb2ciLCJtcHNLZXkiLCJjb250ZXh0IiwiYXBpa2V5IiwicGF5bG9hZCIsImd1aWQiLCJkZXZpY2VJZCIsInN0YXJ0SW5kZXgiLCJzZXJ2ZXIiLCJtcHNTZXJ2ZXIiLCJwb3N0IiwiY29uc29sZSIsImxvZyIsIm9uR3JpZFJlYWR5IiwicGFyYW1zIiwicm93dG90YWxDbnRGZXRjaGVkIiwiZXJyb3JNZXNzYWdlIiwiZ3JpZEFwaSIsImdyaWRDb2x1bW5BcGkiLCJjb2x1bW5BcGkiLCJzaXplQ29sdW1uc1RvRml0IiwiZGF0YVNvdXJjZSIsInJvd0NvdW50IiwiZ2V0Um93cyIsInNob3dMb2FkaW5nT3ZlcmxheSIsInN0YXJ0Um93IiwicmVjb3JkcyIsImhpZGVPdmVybGF5Iiwic3VjY2Vzc0NhbGxiYWNrIiwicmV2ZXJzZSIsInRvdGFsQ250IiwiZXJyb3JNc2ciLCJlcnJvciIsInNob3dOb1Jvd3NPdmVybGF5IiwiY2F0Y2giLCJlbmRSb3ciLCJwYWdpbmF0aW9uR2V0VG90YWxQYWdlcyIsInBhcnNlSW50IiwicGFnaW5hdGlvbkdldEN1cnJlbnRQYWdlIiwic2l6ZSIsInNsaWNlIiwic2V0RGF0YXNvdXJjZSIsImZldGNoQ29tcGxldGVBdWRpdExvZyIsInBhZ2luYXRpb25HZXRSb3dDb3VudCIsImNvbXBsZXRlQXVkaXRMb2ciLCJyb3dzRmV0Y2hlZCIsInBhZ2luYXRpb25HZXRQYWdlU2l6ZSIsImluZGV4TnVtYmVyIiwibG9ncyIsImhhc0V4cG9ydEZhaWxlZCIsImlzRXhwb3J0aW5nIiwic25hY2tCYXJNZXNzYWdlIiwic2V0VGltZW91dCIsImRvd25sb2FkQ1NWIiwiZ2VuZXJhdGVDc3YiLCJvbkdyaWRTaXplQ2hhbmdlZCIsImdyaWRXaWR0aCIsIm9mZnNldFdpZHRoIiwiY29sdW1uc1RvU2hvdyIsImNvbHVtbnNUb0hpZGUiLCJ0b3RhbENvbHNXaWR0aCIsImFsbENvbHVtbnMiLCJnZXRBbGxDb2x1bW5zIiwiZ2V0TWluV2lkdGgiLCJjb2xJZCIsInNldENvbHVtbnNWaXNpYmxlIiwidG9nZ2xlUGFnaW5hdGlvbkJ1dHRvbnMiLCJkaXJlY3Rpb25TdHJpbmciLCJvblBhZ2luYXRpb25DaGFuZ2VkIiwiY3VycmVudFBhZ2UiLCJ0b3RhbFBhZ2VzIiwiZ29Ub1BhZ2UiLCJwYWdpbmF0aW9uR29Ub1BhZ2UiLCJwYWdlTnVtYmVyIiwib25CdEZpcnN0IiwicGFnaW5hdGlvbkdvVG9GaXJzdFBhZ2UiLCJvbkJ0TGFzdCIsInBhZ2luYXRpb25Hb1RvTGFzdFBhZ2UiLCJvbkJ0TmV4dCIsInBhZ2luYXRpb25Hb1RvTmV4dFBhZ2UiLCJvbkJ0UHJldmlvdXMiLCJwYWdpbmF0aW9uR29Ub1ByZXZpb3VzUGFnZSIsIm9uQnRFeHBvcnQiLCJpbmZvIiwiaGFuZGxlQ2hhbmdlIiwicm93RGF0YSIsInNob3dUb29sdGlwIiwibm9Sb3dzT3ZlcmxheVRlbXBsYXRlIiwiZnJhbWV3b3JrQ29tcG9uZW50IiwiYWdDb2x1bW5IZWFkZXIiLCJjdXN0b21Ub29sdGlwIiwiaGVpZ2h0IiwiZGVmYXVsdENvbERlZiIsInRvb2x0aXBDb21wb25lbnQiLCJwYWdpbmF0aW9uIiwicGFnaW5hdGlvblBhZ2VTaXplIiwiY2FjaGVCbG9ja1NpemUiLCJyb3dNb2RlbFR5cGUiLCJpbmZpbml0ZUluaXRpYWxSb3dDb3VudCIsIm92ZXJsYXlOb1Jvd3NUZW1wbGF0ZSIsInN1cHByZXNzUGFnaW5hdGlvblBhbmVsIiwic3VwcHJlc3NTY3JvbGxPbk5ld0RhdGEiLCJmcmFtZXdvcmtDb21wb25lbnRzIiwiYm90dG9tIiwibWFyZ2luIiwiZGlzYWJsZWQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiU25hY2tCYXIiLCJjb250ZXh0VHlwZSIsImRlZmF1bHQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iXSwibWFwcGluZ3MiOiI2REFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFT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TSxFQUFRLEdBQ0ZyRSxFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVFyTCxXQUFhcUwsRUFBUTBNLFFBQVUxTSxLQUcvQ0EsRUFBVSxDQUFDLENBQUMxTSxFQUFPQyxFQUFJeU0sRUFBUyxNQUc5QyxJQUFJMUcsRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBRVArSyxFQUFJckUsRUFBUzFHLEdBSTFCaEcsRUFBT0QsUUFBVTJNLEVBQVEyTSxRQUFVLEksaUJDaEJuQ3RaLEVBRGtDLEVBQVEsR0FDaEN1WixFQUE0QixJQUU5QjNQLEtBQUssQ0FBQzNKLEVBQU9DLEVBQUkscU9BQXNPLEtBRS9QRCxFQUFPRCxRQUFVQSxHLGNDTmpCQyxFQUFPRCxRQUFVa0MsUUFBUSwyRCxnQkNBekIsSUFBSThPLEVBQU0sRUFBUSxHQUNGckUsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRckwsV0FBYXFMLEVBQVEwTSxRQUFVMU0sS0FHL0NBLEVBQVUsQ0FBQyxDQUFDMU0sRUFBT0MsRUFBSXlNLEVBQVMsTUFHOUMsSUFBSTFHLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUVQK0ssRUFBSXJFLEVBQVMxRyxHQUkxQmhHLEVBQU9ELFFBQVUyTSxFQUFRMk0sUUFBVSxJLGlCQ2hCbkN0WixFQURrQyxFQUFRLEdBQ2hDdVosRUFBNEIsSUFFOUIzUCxLQUFLLENBQUMzSixFQUFPQyxFQUFJLDBrR0FBK2xHLEtBRXhuR0QsRUFBT0QsUUFBVUEiLCJmaWxlIjoiYXVkaXRsb2cuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDY0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQ29weXJpZ2h0IChjKSBJbnRlbCBDb3Jwb3JhdGlvbiAyMDE5XHJcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgZG90IGZyb20gJ2RvdC1vYmplY3QnXHJcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJ1xyXG5cclxuLyoqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBvYmplY3Qgb3Igbm90ICovXHJcbmV4cG9ydCBjb25zdCBpc09iamVjdCA9ICh2YWx1ZSk6IGFueSA9PiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXHJcblxyXG4vKiogVGFrZXMgYW4gb2JqZWN0IGFuZCBjb252ZXJ0cyB0aGUga2V5cyBpbnRvIGNhbWVsY2FzZSAgKi9cclxuZXhwb3J0IGNvbnN0IGNhbWVsQ2FzZUtleXMgPSAoZGF0YSk6IGFueSA9PiB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgIHJldHVybiBkYXRhLm1hcChjYW1lbENhc2VLZXlzKVxyXG4gIH0gZWxzZSBpZiAoZGF0YSAhPT0gbnVsbCAmJiBpc0ZhbHN5KGlzT2JqZWN0KGRhdGEpKSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgYWNjW2NhbWVsQ2FzZShrZXkpXSA9IGNhbWVsQ2FzZUtleXModmFsdWUpXHJcbiAgICAgIHJldHVybiBhY2NcclxuICAgIH0sIHt9KVxyXG4gIH1cclxuICByZXR1cm4gZGF0YVxyXG59XHJcblxyXG4vKiogVGFrZXMgYW4gb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhbm90aGVyIHN0cnVjdHVyZSB1c2luZyBkb3Qtbm90YXRpb24gKi9cclxuZXhwb3J0IGNvbnN0IHJlc2hhcGUgPSAocmVzcG9uc2UsIG1vZGVsKTogYW55ID0+IHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZWwpLnJlZHVjZShcclxuICAgIChhY2MsIGtleSkgPT4gZG90LmNvcHkoa2V5LCBtb2RlbFtrZXldLCByZXNwb25zZSwgYWNjKSxcclxuICAgIHt9XHJcbiAgKVxyXG59XHJcblxyXG4vKiogVGFrZXMgYW4gb2JqZWN0LCBjYW1lbCBjYXNlcyB0aGUga2V5cywgYW5kIGNvbnZlcnRzIGl0IHRvIGFub3RoZXIgc3RydWN0dXJlIHVzaW5nIGRvdC1ub3RhdGlvbiAqL1xyXG5leHBvcnQgY29uc3QgY2FtZWxDYXNlUmVzaGFwZSA9IChyZXNwb25zZSwgbW9kZWwpOiBhbnkgPT4ge1xyXG4gIHJldHVybiByZXNoYXBlKGNhbWVsQ2FzZUtleXMocmVzcG9uc2UpLCBtb2RlbClcclxufVxyXG5cclxuLyoqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBmdW5jdGlvbiAqL1xyXG5leHBvcnQgY29uc3QgaXNGdW5jID0gKHZhbHVlKTogYW55ID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHBhc3N3b3JkTGVuZ3RoVmFsaWRhdGlvbiA9IChsZW5ndGgpOiBhbnkgPT4gbGVuZ3RoID49IDggJiYgbGVuZ3RoIDw9IDMyXHJcblxyXG5leHBvcnQgY29uc3QgbmFtZVZhbGlkYXRpb24gPSAodmFsdWUpOiBhbnkgPT5cclxuICBuZXcgUmVnRXhwKCdeW2EtekEtWjAtOSRAJCElKiM/Ji1ffl5dKyQnKS50ZXN0KHZhbHVlKVxyXG5cclxuZXhwb3J0IGNvbnN0IHBhc3N3b3JkVmFsaWRhdGlvbiA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIG5ldyBSZWdFeHAoXHJcbiAgICAnXig/PS4qWzAtOV0pKD89LipbIUAjJCVeJipdKSg/PS4qW2Etel0pKD89LipbQS1aXSlbYS16QS1aMC05JEAkISUqIz8mLV9+Xl17OCwzMn0kJ1xyXG4gICkudGVzdCh2YWx1ZSlcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBwb3J0VmFsaWRhdGlvbiA9ICh2YWx1ZSkgPT4gbmV3IFJlZ0V4cCgnXig0OTE1WzAtMV18NDkxWzAtNF1cXGR8NDkwXFxkXFxkfDRbMC04XVxcZHszfXxbMS0zXVxcZHs0fXxbMi05XVxcZHszfXwxWzEtOV1cXGR7Mn18MTBbMy05XVxcZHwxMDJbNC05XSkkJykudGVzdCh2YWx1ZSlcclxuZXhwb3J0IGNvbnN0IHBvcnRWYWxpZGF0aW9uID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cChcclxuICAgICdeKDEwMls0LTldfDEwWzMtOV1bMC05XXwxWzEtOV1bMC05XXsyfXxbMi05XVswLTldezN9fFsxLTNdWzAtOV17NH18NFswLThdWzAtOV17M318NDkwWzAtOV17Mn18NDkxWzAtNF1bMC05XXw0OTE1WzAxXSkkJ1xyXG4gICkudGVzdCh2YWx1ZSlcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tb25OYW1lVmFsaWRhdGlvbiA9ICh2YWx1ZSk6IGFueSA9PlxyXG4gIGlzRmFsc3kodmFsdWUpID8gbmV3IFJlZ0V4cCgnW15hLXpBLVowLTkuXy1dJykudGVzdCh2YWx1ZSkgOiB0cnVlXHJcblxyXG5leHBvcnQgY29uc3QgaXBBZGRyZXNzVmFsaWRhdGlvbiA9IChpcFR5cGUsIHZhbHVlKTogYW55ID0+XHJcbiAgaXBUeXBlID09PSAzXHJcbiAgICA/IGlwdjQodmFsdWUpXHJcbiAgICA6IGlwVHlwZSA9PT0gNlxyXG4gICAgICA/IGlwdjYodmFsdWUpXHJcbiAgICAgIDogaXBUeXBlID09PSAyMDFcclxuICAgICAgICA/IGZxZG4odmFsdWUpXHJcbiAgICAgICAgOiAnJ1xyXG5cclxuLyoqIGlwdjQgZm9ybWF0ZSB2YWxpZGF0aW9uICAqL1xyXG5jb25zdCBpcHY0ID0gKHZhbHVlKTogYW55ID0+XHJcbiAgbmV3IFJlZ0V4cChcclxuICAgICdeKFswMV0/WzAtOV0/WzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXFxcLihbMDFdP1swLTldP1swLTldfDJbMC00XVswLTldfDI1WzAtNV0pXFxcXC4oWzAxXT9bMC05XT9bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKVxcXFwuKFswMV0/WzAtOV0/WzAtOV18MlswLTRdWzAtOV18MjVbMC01XSkkJ1xyXG4gICkudGVzdCh2YWx1ZSlcclxuXHJcbi8qKiBpcHY2IGZvcm1hdGUgdmFsaWRhdGlvbiAgKi9cclxuXHJcbmNvbnN0IGlwdjYgPSAodmFsdWUpOiBhbnkgPT5cclxuICBuZXcgUmVnRXhwKFxyXG4gICAgJ14oKD86WzAtOUEtRmEtZl17MSw0fSkpKCg/OjpbMC05QS1GYS1mXXsxLDR9KSkqOjooKD86WzAtOUEtRmEtZl17MSw0fSkpKCg/OjpbMC05QS1GYS1mXXsxLDR9KSkqfCgoPzpbMC05QS1GYS1mXXsxLDR9KSkoKD86OlswLTlBLUZhLWZdezEsNH0pKXs3fSQnXHJcbiAgKS50ZXN0KHZhbHVlKVxyXG5cclxuLyoqIGZxZG4gZm9ybWF0ZSB2YWxpZGF0aW9uICAqL1xyXG5jb25zdCBmcWRuID0gKHZhbHVlKTogYW55ID0+IC9eKD89LnsxLDI1NH0kKSgoPz1bYS16MC05LV17MSw2M31cXC4pKHhuLS0rKT9bYS16MC05XSsoLVthLXowLTldKykqXFwuKStbYS16XXsyLDYzfSQvLnRlc3QodmFsdWUpXHJcblxyXG4vKiogdXRpbGl0eSBmdW5jdGlvbiB0byBqb2luIHRoZSBjc3MgY2xhc3MgbmFtZXMgKi9cclxuZXhwb3J0IGNvbnN0IGpvaW5DbGFzc2VzID0gKC4uLmNsYXNzTmFtZXMpOiBhbnkgPT5cclxuICBjbGFzc05hbWVzXHJcbiAgICAuZmlsdGVyKChuYW1lKSA9PiAhIWlzRmFsc3kobmFtZSkpXHJcbiAgICAuam9pbignICcpXHJcbiAgICAudHJpbSgpXHJcblxyXG4vKipcclxuICogZW5jb2RlIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyA9IChjb25maWdOYW1lKTogc3RyaW5nID0+IHtcclxuICBjb25zdCByZXBsYWNlQ2hhcnMgPSB7ICcjJzogJyUyMycsICclJzogJyUyNScgfVxyXG4gIHJldHVybiBjb25maWdOYW1lLnJlcGxhY2UoLyN8JS9nLCBtYXRjaCA9PiByZXBsYWNlQ2hhcnNbbWF0Y2hdKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJlcGFyZUhlYWRlcnMgPSAoYXBpS2V5LCBpc01wc0NvbnRyb2w/OiBib29sZWFuKTogYW55ID0+IHtcclxuICBjb25zdCBoZWFkZXJzID0ge1xyXG4gICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgfVxyXG4gIGlmIChpc0ZhbHN5KGlzTXBzQ29udHJvbCkpIHtcclxuICAgIGhlYWRlcnNbJ1gtTVBTLUFQSS1LZXknXSA9IGFwaUtleVxyXG4gIH0gZWxzZSB7XHJcbiAgICBoZWFkZXJzWydYLVJQUy1BUEktS2V5J10gPSBhcGlLZXlcclxuICB9XHJcbiAgcmV0dXJuIGhlYWRlcnNcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRmlsZUV4dGVuc2lvbnMgPSAoZmlsZVBhdGgpOiBib29sZWFuID0+IHtcclxuICBjb25zdCB2YWxpZEV4dGVuc2lvbnMgPSAvKFxcLnBmeCkkL2lcclxuICByZXR1cm4gISFpc0ZhbHN5KHZhbGlkRXh0ZW5zaW9ucy5leGVjKGZpbGVQYXRoKSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzRmFsc3kgPSAodmFsdWU6IGFueSk6IGJvb2xlYW4gPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gJycgJiYgdmFsdWUgIT09IGZhbHNlICYmIHZhbHVlICE9PSAwXHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IGkxOG5leHQgZnJvbSAnaTE4bmV4dCdcclxuaW1wb3J0IHsgaXNGYWxzeSB9IGZyb20gJy4vVXRpbGl0aWVzJ1xyXG5cclxuLyoqXHJcbiAqIEEgaGVscGVyIG1ldGhvZCBmb3IgdHJhbnNsYXRpbmcgaGVhZGVyTmFtZXMgYW5kIGhlYWRlclRvb2x0aXBzIG9mIGNvbHVtbkRlZnMuXHJcbiAqIElmIGhlYWRlclRvb2x0aXAgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdHJhbnNsYXRlZC5cclxuICogSWYgaGVhZGVyVG9vbHRpcCBpcyBub3QgcHJvdmlkZWQsIHRoZSBoZWFkZXJOYW1lIHdpbGwgYmUgdXNlZCB0byBlbnN1cmUgaGVhZGVyc1xyXG4gKiBjYW4gYmUgZGVjaXBoZXJlZCBldmVuIHdoZW4gdGhlIGNvbHVtbiBpcyB0b28gbmFycm93IHRvIHNob3cgdGhlIGVudGlyZSBoZWFkZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlQ29sdW1uRGVmcyA9IChjb2x1bW5EZWZzOiBhbnkpOiBhbnkgPT4ge1xyXG4gIHJldHVybiBjb2x1bW5EZWZzLm1hcChjb2x1bW5EZWYgPT4ge1xyXG4gICAgY29uc3QgaGVhZGVyQ29tcG9uZW50UGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgY29sdW1uRGVmLmhlYWRlckNvbXBvbmVudFBhcmFtcylcclxuICAgIGNvbnN0IGhlYWRlck5hbWUgPSBpc0ZhbHN5KGNvbHVtbkRlZi5oZWFkZXJOYW1lKSA/IGkxOG5leHQudChjb2x1bW5EZWYuaGVhZGVyTmFtZSkgOiB1bmRlZmluZWRcclxuICAgIGNvbnN0IGhlYWRlclRvb2x0aXAgPSBpc0ZhbHN5KGNvbHVtbkRlZi5oZWFkZXJUb29sdGlwKSA/IGkxOG5leHQudChjb2x1bW5EZWYuaGVhZGVyVG9vbHRpcCkgOiBoZWFkZXJOYW1lXHJcbiAgICBoZWFkZXJDb21wb25lbnRQYXJhbXMuZGVzY3JpcHRpb24gPSBpc0ZhbHN5KGNvbHVtbkRlZi5oZWFkZXJDb21wb25lbnRQYXJhbXMpICYmIGlzRmFsc3koY29sdW1uRGVmLmhlYWRlckNvbXBvbmVudFBhcmFtcy5kZXNjcmlwdGlvbikgPyBpMThuZXh0LnQoY29sdW1uRGVmLmhlYWRlckNvbXBvbmVudFBhcmFtcy5kZXNjcmlwdGlvbikgOiBoZWFkZXJOYW1lXHJcbiAgICByZXR1cm4geyAuLi5jb2x1bW5EZWYsIGhlYWRlck5hbWUsIGhlYWRlckNvbXBvbmVudFBhcmFtcywgaGVhZGVyVG9vbHRpcCB9XHJcbiAgfSlcclxufVxyXG5cclxuLyoqIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3RhdGljIHRyYW5sYXRpb24gdGV4dHMgZnJvbSB0cmFuc2xhdGlvbi5qc29uXHJcbiAqIEBwYXJhbTogdGV4dCAtIGNvbnRhaW5zIHRoZSBwYXRoIHRvIHRoZSB0ZXh0IGluIHRyYW5zbGF0aW9uLmpzb25cclxuKi9cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVRleHQgPSAodGV4dDogYW55KTogYW55ID0+IGkxOG5leHQudCh0ZXh0KVxyXG5cclxuLyoqIGZ1bmN0aW9uIHRvIGdldCB0aGUgdHJhbnNsYXRpb24gdGV4dCB3aGVuIHRoZXJlIGFyZSBkeW5hbWljIHZhbHVlcyB0byBiZSByZW5kZXJlZCBpbiB0cmFuc2xhdGlvblxyXG4gKiBAcGFyYW06IHRleHQgLSBjb250YWlucyB0aGUgcGF0aCB0byB0aGUgdGV4dCBpbiB0cmFuc2xhdGlvbi5qc29uXHJcbiAqIEBwYXJhbTogdHJhbnNsYXRlIC0gb2JqZWN0IGNvbnRhaW5pbmcgZHluYW1pYyB2YWx1ZXMuIFRoZSBrZXlzIHRvIGJlIHVzZWQgaW5zaWRlIHRyYW5zbGF0aW9uLmpzb25cclxuICovXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVEeW5hbWljVGV4dCA9ICh0ZXh0OiBhbnksIHRyYW5zbGF0ZSk6IGFueSA9PiBpMThuZXh0LnQodGV4dCwgeyB0cmFuc2xhdGUgfSlcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCIpOyIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IHsgaXNGYWxzeSwgcHJlcGFyZUhlYWRlcnMgfSBmcm9tICcuLi9zaGFyZWQvVXRpbGl0aWVzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIEh0dHBDbGllbnQge1xyXG4gIHN0YXRpYyBhc3luYyBnZXQgKHVybCwgYXBpS2V5LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaCh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgcG9zdCAodXJsLCBib2R5ID0ge30sIGFwaUtleT8sIGlzTXBzPywgb3B0aW9ucyA9IHt9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIGNvbnN0IGpzb25IZWFkZXJzID0gcHJlcGFyZUhlYWRlcnMoYXBpS2V5LCBpc01wcylcclxuICAgIGlmIChpc0ZhbHN5KGlzTXBzKSkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaCh1cmwsIHtcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBIdHRwQ2xpZW50LmZldGNoUlBTKHVybCwge1xyXG4gICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGRlbGV0ZSAodXJsLCBhcGlLZXk/LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaFJQUyh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgaGVhZGVyczoganNvbkhlYWRlcnNcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgcGF0Y2ggKHVybCwgYm9keSA9IHt9LCBhcGlLZXk/LCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgY29uc3QganNvbkhlYWRlcnMgPSBwcmVwYXJlSGVhZGVycyhhcGlLZXkpXHJcbiAgICByZXR1cm4gYXdhaXQgSHR0cENsaWVudC5mZXRjaFJQUyh1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICBib2R5OiBib2R5LFxyXG4gICAgICBoZWFkZXJzOiBqc29uSGVhZGVyc1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBmZXRjaCAodXJsLCBvcHRpb25zID0ge30pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgKG9wdGlvbnMgYXMgYW55KS5tb2RlID0gJ2NvcnMnO1xyXG4gICAgKG9wdGlvbnMgYXMgYW55KS5jcmVkZW50aWFscyA9ICdpbmNsdWRlJztcclxuICAgIChvcHRpb25zIGFzIGFueSkud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxyXG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucykudGhlbihhc3luYyByZXN1bHQgPT4gYXdhaXQgcmVzdWx0Lmpzb24oKSlcclxuICB9XHJcblxyXG4gIC8vIEhhbmRsZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBhcyB0ZXh0XHJcbiAgc3RhdGljIGFzeW5jIGZldGNoUlBTICh1cmwsIG9wdGlvbnMgPSB7fSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKGFzeW5jIHJlc3VsdCA9PiBhd2FpdCByZXN1bHQudGV4dCgpKVxyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAyMFxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBEb21haW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XHJcbiAgZGF0YToge31cclxufSlcclxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlclByb3BzIHtcclxuICBkYXRhOiBhbnlcclxufVxyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvdmlkZXJQcm9wcywge30+IHtcclxuICByZW5kZXIgKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8RG9tYWluQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBkYXRhOiB0aGlzLnByb3BzLmRhdGEgfX0+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgIDwvRG9tYWluQ29udGV4dC5Qcm92aWRlcj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb25zdW1lciA9ICh7IGNoaWxkcmVuIH0pOiBKU1guRWxlbWVudCA9PiB7XHJcbiAgcmV0dXJuIDxEb21haW5Db250ZXh0LkNvbnN1bWVyID5cclxuICAgIHtjaGlsZHJlbn1cclxuICA8L0RvbWFpbkNvbnRleHQuQ29uc3VtZXI+XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcclxuXHJcbmNvbnN0IFN0eWxlZEJhciA9IFN0eWxlZC5kaXZgXHJcbmRpc3BsYXk6IGJsb2NrO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxuYm90dG9tOiAwO1xyXG5sZWZ0OiA0MCU7XHJcbmJhY2tncm91bmQ6ICR7KHsgdHlwZSB9KSA9PiBnZXRDb2xvcnModHlwZSl9O1xyXG5ib3JkZXI6ICR7KHsgdHlwZSB9KSA9PiBgMXB4IHNvbGlkICR7Z2V0Q29sb3JzKHR5cGUpfWB9O1xyXG5tYXJnaW46IDEwcHg7XHJcbnBhZGRpbmc6IDEwcHg7cG9zaXRpb246IGFic29sdXRlO1xyXG5jb2xvcjogI2ZmZjsgXHJcbmZvbnQtd2VpZ2h0OjUwMDtcclxuei1pbmRleDoxO1xyXG5gXHJcblxyXG5jb25zdCBnZXRDb2xvcnMgPSAodHlwZSk6IHN0cmluZyA9PiB0eXBlID09PSAnc3VjY2VzcycgPyAnIzRjYWY1MCcgOiB0eXBlID09PSAnd2FybmluZycgPyAnI2ZmOTgwMCcgOiB0eXBlID09PSAnZXJyb3InID8gJyNmNDQzMzYnIDogJyMwMDAwMDAnXHJcblxyXG5jb25zdCBTbmFja0JhciA9ICh7IG1lc3NhZ2UsIHR5cGUgfSk6IGFueSA9PiA8U3R5bGVkQmFyIHR5cGU9e3R5cGV9PnttZXNzYWdlfTwvU3R5bGVkQmFyPlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU25hY2tCYXJcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaTE4bmV4dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHlsZWQtY29tcG9uZW50c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRvdC1vYmplY3RcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2FtZWxjYXNlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFnLWdyaWQtcmVhY3RcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYWctZ3JpZC1jb21tdW5pdHkvZGlzdC9zdHlsZXMvYWctZ3JpZC5jc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9tZW50XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV4cG9ydC10by1jc3ZcIik7IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi9VdGlsaXRpZXMnXHJcbmNvbnN0IEVNUFRZX0ZJRUxEX1ZBTCA9ICctLS0nXHJcbi8qKiBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIGZvciBkYXRlcyBpbiB0aGUgUGNzR3JpZCAqL1xyXG5jb25zdCBERUZBVUxUX1RJTUVfRk9STUFUID0gJ1lZWVktTU0tREQgSEg6bW0nXHJcbi8qKiBBIGNvbGxlY3Rpb24gb2YgcmV1c2FibGUgdmFsdWUgZm9ybWF0dGVyIG1ldGhvZHMgKi9cclxuY29uc3QgZ3JpZFZhbHVlRm9ybWF0dGVycyA9IHtcclxuICBjaGVja0ZvckVtcHR5OiAodmFsdWUsIGVtcHR5VmFsdWUgPSBFTVBUWV9GSUVMRF9WQUwpID0+IHZhbHVlIHx8IGVtcHR5VmFsdWVcclxufVxyXG5jb25zdCB7IGNoZWNrRm9yRW1wdHkgfSA9IGdyaWRWYWx1ZUZvcm1hdHRlcnNcclxuY29uc3QgZm9ybWF0VGltZSA9ICh2YWx1ZSk6IGFueSA9PiB7XHJcbiAgaWYgKGlzRmFsc3kodmFsdWUpKSB7XHJcbiAgICBjb25zdCB0aW1lID0gbW9tZW50LnV0Yyh2YWx1ZSkubG9jYWwoKVxyXG4gICAgcmV0dXJuIGNoZWNrRm9yRW1wdHkoKHRpbWUudW5peCgpID4gMCkgPyB0aW1lLmZvcm1hdChERUZBVUxUX1RJTUVfRk9STUFUKSA6ICcnKVxyXG4gIH1cclxuICByZXR1cm4gdmFsdWVcclxufVxyXG5leHBvcnQgY29uc3QgVGltZVJlbmRlcmVyID0gKHsgdmFsdWUgfSk6IGFueSA9PiB7XHJcbiAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGZvcm1hdFRpbWUodmFsdWUpXHJcbiAgcmV0dXJuIChcclxuICAgIGZvcm1hdHRlZFRpbWUgfHwgJydcclxuICApXHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoYykgSW50ZWwgQ29ycG9yYXRpb24gMjAxOVxyXG4qIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgeyBUaW1lUmVuZGVyZXIgfSBmcm9tICcuLi9zaGFyZWQvVGltZVJlbmRlcmVyJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGF1ZGl0bG9nQ2xvdW1uRGVmcyA9IHtcclxuICBhdWRpdGFwcGlkOiB7XHJcbiAgICBoZWFkZXJOYW1lOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uYXVkaXRhcHBpZCcsXHJcbiAgICBmaWVsZDogJ2F1ZGl0QXBwSWQnLFxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zOiB7IGRlc2NyaXB0aW9uOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uYXVkaXRhcHBpZGRlc2NyaXB0aW9uJyB9XHJcbiAgfSxcclxuICBldmVudGlkOiB7XHJcbiAgICBoZWFkZXJOYW1lOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uZXZlbnRJZCcsXHJcbiAgICBmaWVsZDogJ2V2ZW50SWQnLFxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zOiB7IGRlc2NyaXB0aW9uOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uZXZlbnRJZGRlc2NyaXB0aW9uJyB9XHJcbiAgfSxcclxuICBpbml0aWF0b3J0eXBlOiB7XHJcbiAgICBoZWFkZXJOYW1lOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uaW5pdGlhdG9ydHlwZScsXHJcbiAgICBmaWVsZDogJ2luaXRpYXRvclR5cGUnXHJcbiAgfSxcclxuICBhdWRpdGFwcDoge1xyXG4gICAgaGVhZGVyTmFtZTogJ2F1ZGl0TG9nLmdyaWQuY29sdW1uLmF1ZGl0YXBwJyxcclxuICAgIGZpZWxkOiAnYXVkaXRBcHAnLFxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zOiB7IGRlc2NyaXB0aW9uOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uYXVkaXRhcHBkZXNjcmlwdGlvbicsIGVuYWJsZVNvcnRpbmc6IHRydWUgfSxcclxuICAgIHRvb2x0aXBGaWVsZDogJ2F1ZGl0QXBwJyxcclxuICAgIG1pbldpZHRoOiAxNTBcclxuICB9LFxyXG4gIGV2ZW50OiB7XHJcbiAgICBoZWFkZXJOYW1lOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uZXZlbnQnLFxyXG4gICAgZmllbGQ6ICdldmVudCcsXHJcbiAgICBoZWFkZXJDb21wb25lbnRQYXJhbXM6IHsgZGVzY3JpcHRpb246ICdhdWRpdExvZy5ncmlkLmNvbHVtbi5ldmVudGRlc2NyaXB0aW9uJyB9LFxyXG4gICAgdG9vbHRpcEZpZWxkOiAnZXZlbnQnLFxyXG4gICAgbWluV2lkdGg6IDE1MFxyXG4gIH0sXHJcbiAgaW5pdGlhdG9yOiB7XHJcbiAgICBoZWFkZXJOYW1lOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uaW5pdGlhdG9yJyxcclxuICAgIGZpZWxkOiAnaW5pdGlhdG9yJyxcclxuICAgIGhlYWRlckNvbXBvbmVudFBhcmFtczogeyBkZXNjcmlwdGlvbjogJ2F1ZGl0TG9nLmdyaWQuY29sdW1uLmluaXRpYXRvcmRlc2NyaXB0aW9uJyB9LFxyXG4gICAgbWluV2lkdGg6IDE1MFxyXG4gIH0sXHJcbiAgdGltZToge1xyXG4gICAgaGVhZGVyTmFtZTogJ2F1ZGl0TG9nLmdyaWQuY29sdW1uLnRpbWUnLFxyXG4gICAgZmllbGQ6ICd0aW1lJyxcclxuICAgIGNlbGxSZW5kZXJlckZyYW1ld29yazogVGltZVJlbmRlcmVyLFxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zOiB7IGRlc2NyaXB0aW9uOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4udGltZWRlc2NyaXB0aW9uJyB9LFxyXG4gICAgbWluV2lkdGg6IDE1MFxyXG4gIH0sXHJcbiAgbWNsb2NhdGlvbnR5cGU6IHtcclxuICAgIGhlYWRlck5hbWU6ICdhdWRpdExvZy5ncmlkLmNvbHVtbi5tY2xvY2F0aW9udHlwZScsXHJcbiAgICBmaWVsZDogJ21DTG9jYXRpb25UeXBlJyxcclxuICAgIGhlYWRlckNvbXBvbmVudFBhcmFtczogeyBkZXNjcmlwdGlvbjogJ2F1ZGl0TG9nLmdyaWQuY29sdW1uLm1jbG9jYXRpb250eXBlZGVzY3JpcHRpb24nIH1cclxuICB9LFxyXG4gIG5ldGFkZHJlc3M6IHtcclxuICAgIGhlYWRlck5hbWU6ICdhdWRpdExvZy5ncmlkLmNvbHVtbi5uZXRhZGRyZXNzJyxcclxuICAgIGZpZWxkOiAnbmV0QWRkcmVzcycsXHJcbiAgICBoZWFkZXJDb21wb25lbnRQYXJhbXM6IHsgZGVzY3JpcHRpb246ICdhdWRpdExvZy5ncmlkLmNvbHVtbi5uZXRhZGRyZXNzZGVzY3JpcHRpb24nIH0sXHJcbiAgICBtaW5XaWR0aDogMTUwXHJcbiAgfSxcclxuICBleHN0cjoge1xyXG4gICAgaGVhZGVyTmFtZTogJ2F1ZGl0TG9nLmdyaWQuY29sdW1uLmV4c3RyJyxcclxuICAgIGZpZWxkOiAnZXhTdHInLFxyXG4gICAgaGVhZGVyQ29tcG9uZW50UGFyYW1zOiB7IGRlc2NyaXB0aW9uOiAnYXVkaXRMb2cuZ3JpZC5jb2x1bW4uZXhzdHJkZXNjcmlwdGlvbicgfSxcclxuICAgIG1pbldpZHRoOiAxNTBcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhdWRpdExvZ0RhdGFNb2RlbCA9IHtcclxuICBhdWRpdEFwcElkOiAnYXVkaXRBcHBJZCcsXHJcbiAgZXZlbnRJZDogJ2V2ZW50SWQnLFxyXG4gIGluaXRpYXRvcjogJ2luaXRpYXRvcicsXHJcbiAgdGltZTogJ3RpbWUnLFxyXG4gIGF1ZGl0QXBwOiAnYXVkaXRBcHAnLFxyXG4gIGV2ZW50OiAnZXZlbnQnLFxyXG4gIG5ldEFkZHJlc3M6ICduZXRBZGRyZXNzJyxcclxuICBleFN0cjogJ2V4U3RyJ1xyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyogVG9vbHRpcCBjb21wb25lbnQgcmV0dXJucyB0aGUgdG9vbHRpcCBtZXNzYWdlXHJcbndoaWNoICBpcyBwYXNzZWQgYXMgcHJvcHMgKi9cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCAnLi9Ub29sdGlwLnNjc3MnXHJcblxyXG5pbnRlcmZhY2UgVG9vbHRpcFByb3BzIHtcclxuICBtZXNzYWdlOiBzdHJpbmdcclxuICBzdHlsZXM6IGFueVxyXG59XHJcbmV4cG9ydCBjb25zdCBUb29sdGlwOiBSZWFjdC5TRkM8VG9vbHRpcFByb3BzPiA9IHByb3BzID0+IHtcclxuICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPSd0b29sdGlwJz5cclxuICAgIDxzcGFuIHN0eWxlPXtwcm9wcy5zdHlsZXN9IGlkPVwidG9vbHRpcC1jb250ZW50XCIgY2xhc3NOYW1lPSd0b29sdGlwX190ZXh0Jz57cHJvcHMubWVzc2FnZX08L3NwYW4+XHJcbiAgPC9kaXY+KVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEN1c3RvbWl6ZWQgY29sdW1uIGhlYWRlciBmb3IgYWctZ3JpZCB0byBpbmNsdWRlIGljb25zIGFuZCBoYW5kbGUgaGVhZGVyIHRvb2x0aXBzXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4uL3NoYXJlZC9Ub29sdGlwJ1xyXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvcmVhY3QtZm9udGF3ZXNvbWUnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRlclBhcmFtcyB7XHJcbiAgZGlzcGxheU5hbWU6IHN0cmluZ1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxuICBlbmFibGVTb3J0aW5nOiBib29sZWFuXHJcbn1cclxuZXhwb3J0IGNsYXNzIEN1c3RvbUhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxIZWFkZXJQYXJhbXMsIHsgaXNNb3VzZU92ZXI6IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZyB9PiB7XHJcbiAgdG9vbHRpcFN0eWxlczogYW55ID0ge31cclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaXNNb3VzZU92ZXI6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAgKiBhZGp1c3RtZW50cyB0byBhdm9pZCB0b29sdGlwIGVkZ2VzIGJlaW5nIGNob3BwZWQgb2ZmXHJcbiAgICAgKi9cclxuICBhZGp1c3RUb29sdGlwU3R5bGUgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnRvb2x0aXBTdHlsZXMubGVmdCA9IDBcclxuICAgIHRoaXMudG9vbHRpcFN0eWxlcy5tYXJnaW5MZWZ0ID0gMFxyXG4gICAgdGhpcy50b29sdGlwU3R5bGVzLndpZHRoID0gJzEzMHB4J1xyXG4gICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvbi5sZW5ndGggPCAzNCA/IHRoaXMudG9vbHRpcFN0eWxlcy50b3AgPSAnLTQ4cHgnIDogKCh0aGlzLnByb3BzLmRlc2NyaXB0aW9uLmxlbmd0aCA8IDY4KSA/IHRoaXMudG9vbHRpcFN0eWxlcy50b3AgPSAnLTY0cHgnIDogdGhpcy50b29sdGlwU3R5bGVzLnRvcCA9ICctNjhweCcpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICAqIGR5bmFtaWNhbGx5IGdldCB0aGUgaWNvbiBwb3NpdGlvbiBhbmQgYWRqdXN0IHRvb2x0aXAgc3R5bGVzXHJcbiAgICAgKi9cclxuICBwcmVwYXJlVG9vbHRpcFN0eWxlID0gKGV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBncmlkUG9zaXRpb246IGFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdncmlkLXdyYXBwZXInKVxyXG4gICAgY29uc3QgZ3JpZExlZnRQb3NpdGlvbjogYW55ID0gZ3JpZFBvc2l0aW9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnRcclxuICAgIGNvbnN0IHJlY3Q6IGFueSA9IGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgY29uc3QgdG9vbHRpcFdpZHRoOiBudW1iZXIgPSAyMDBcclxuICAgIHRoaXMudG9vbHRpcFN0eWxlcyA9IHt9XHJcbiAgICB0aGlzLnRvb2x0aXBTdHlsZXMucG9zaXRpb24gPSAnZml4ZWQnXHJcbiAgICB0aGlzLnRvb2x0aXBTdHlsZXMubGVmdCA9IHJlY3QubGVmdCAtICh0b29sdGlwV2lkdGggLyAyICsgcmVjdC53aWR0aCAvIDIpIC0gZ3JpZExlZnRQb3NpdGlvblxyXG4gICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvbi5sZW5ndGggPCAzNCA/IHRoaXMudG9vbHRpcFN0eWxlcy50b3AgPSAnLTMwcHgnIDogKCh0aGlzLnByb3BzLmRlc2NyaXB0aW9uLmxlbmd0aCA8IDY4KSA/IHRoaXMudG9vbHRpcFN0eWxlcy50b3AgPSAnLTQ4cHgnIDogdGhpcy50b29sdGlwU3R5bGVzLnRvcCA9ICctNjBweCcpXHJcbiAgICBpZiAodGhpcy50b29sdGlwU3R5bGVzLmxlZnQgPCAwKSB7XHJcbiAgICAgIHRoaXMuYWRqdXN0VG9vbHRpcFN0eWxlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRvZ2dsZSB0b29sdGlwIGFuZCBzZXQgdG9vbHRpcCBtZXNzYWdlXHJcbiAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCk6IGFueSA9PiB7XHJcbiAgICB0aGlzLnByZXBhcmVUb29sdGlwU3R5bGUoZXZlbnQpXHJcbiAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgICAgcmV0dXJuIHsgaXNNb3VzZU92ZXI6IHRydWUsIG1lc3NhZ2U6IHByb3BzLmRlc2NyaXB0aW9uIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyBjbGVhciBtZXNzYWdlIHdoZW4gbW91c2UgcG9pbnRlciBsZWF2ZXMgdGhlIGljb25cclxuICBoYW5kbGVNb3VzZUxlYXZlID0gKCk6IGFueSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSwgcHJvcHMpID0+IHtcclxuICAgICAgcmV0dXJuIHsgaXNNb3VzZU92ZXI6IGZhbHNlLCBtZXNzYWdlOiAnJyB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgY29uc3QgbWVudSA9IDxkaXYgY2xhc3NOYW1lPXtgY3VzdG9tSGVhZGVyTWVudUJ1dHRvbiAke3RoaXMucHJvcHMuZGlzcGxheU5hbWV9YH1cclxuICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVNb3VzZUNsaWNrfSBvbk1vdXNlTGVhdmU9e3RoaXMuaGFuZGxlTW91c2VMZWF2ZX0+XHJcbiAgICAgIDxGb250QXdlc29tZUljb24gY2xhc3NOYW1lPXt0aGlzLnByb3BzLmRpc3BsYXlOYW1lfSBpY29uPSdpbmZvLWNpcmNsZScgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgcmV0dXJuICg8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgIHt0aGlzLnN0YXRlLmlzTW91c2VPdmVyICYmIDxUb29sdGlwIG1lc3NhZ2U9e3RoaXMuc3RhdGUubWVzc2FnZX0gc3R5bGVzPXt0aGlzLnRvb2x0aXBTdHlsZXN9IC8+fVxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JyB9fT57dGhpcy5wcm9wcy5kaXNwbGF5TmFtZX0gJm5ic3A7IHttZW51fTwvZGl2PlxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD4pXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIHRvb2x0aXAgb24gYWctZ3JpZCByb3cgaG92ZXJcclxuICovXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBpc0ZhbHN5IH0gZnJvbSAnLi4vc2hhcmVkL1V0aWxpdGllcydcclxuaW1wb3J0ICcuL0N1c3RvbVRvb2x0aXAuc2NzcydcclxuXHJcbmludGVyZmFjZSBDdXN0b21Ub29sdGlwUHJvcHMge1xyXG4gIHJvd0luZGV4OiBudW1iZXJcclxuICBhcGk6IGFueVxyXG4gIGNvbHVtbjogYW55XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21Ub29sdGlwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEN1c3RvbVRvb2x0aXBQcm9wcz4ge1xyXG4gIGdldFJlYWN0Q29udGFpbmVyQ2xhc3NlcyAoKTogYW55IHtcclxuICAgIHJldHVybiBbJ2N1c3RvbS10b29sdGlwJ11cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgIGNvbnN0IHsgYXBpLCByb3dJbmRleCwgY29sdW1uIH0gPSB0aGlzLnByb3BzXHJcbiAgICAvLyBnZXQgcm93IGRhdGEgYmFzZWQgb24gaW5kZXhcclxuICAgIGNvbnN0IGRhdGEgPSBpc0ZhbHN5KGFwaS5nZXREaXNwbGF5ZWRSb3dBdEluZGV4KHJvd0luZGV4KSkgPyBhcGkuZ2V0RGlzcGxheWVkUm93QXRJbmRleChyb3dJbmRleCkuZGF0YSA6ICcnXHJcbiAgICBjb25zdCBpc1JvbGVOYW1lID0gY29sdW1uLmNvbERlZi5maWVsZCA9PT0gJ2F1ZGl0QXBwJ1xyXG4gICAgY29uc3QgaXNFdmVudCA9IGNvbHVtbi5jb2xEZWYuZmllbGQgPT09ICdldmVudCdcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgeyhpc1JvbGVOYW1lICYmIGlzRmFsc3koZGF0YSkpID8gKDxkaXYgY2xhc3NOYW1lPVwiY3VzdG9tLXRvb2x0aXBcIj5cclxuICAgICAgICAgIDxwPjxzcGFuPlJvbGUgTmFtZTp7ZGF0YS5hdWRpdEFwcH08L3NwYW4+PC9wPlxyXG4gICAgICAgICAgPHA+PHNwYW4+Um9sZSBJRDoge2RhdGEuYXVkaXRBcHBJZH08L3NwYW4+PC9wPlxyXG4gICAgICAgIDwvZGl2PikgOiBudWxsfVxyXG4gICAgICAgIHsoaXNFdmVudCAmJiBpc0ZhbHN5KGRhdGEpKSA/ICg8ZGl2IGNsYXNzTmFtZT1cImN1c3RvbS10b29sdGlwXCI+XHJcbiAgICAgICAgICA8cD48c3Bhbj5FdmVudDoge2RhdGEuZXZlbnR9PC9zcGFuPjwvcD5cclxuICAgICAgICAgIDxwPjxzcGFuPkV2ZW50IElEOiB7ZGF0YS5ldmVudElkfTwvc3Bhbj48L3A+XHJcbiAgICAgICAgPC9kaXY+KSA6IG51bGx9XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKGMpIEludGVsIENvcnBvcmF0aW9uIDIwMTlcclxuKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IEFnR3JpZFJlYWN0IH0gZnJvbSAnYWctZ3JpZC1yZWFjdCdcclxuaW1wb3J0IHsgYXVkaXRsb2dDbG91bW5EZWZzLCBhdWRpdExvZ0RhdGFNb2RlbCB9IGZyb20gJy4vQXVkaXRMb2dDb25maWcnXHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICcuLi9zZXJ2aWNlcy9IdHRwQ2xpZW50J1xyXG5pbXBvcnQgeyBDdXN0b21IZWFkZXIgfSBmcm9tICcuL0N1c3RvbUhlYWRlcidcclxuaW1wb3J0IHsgQ3VzdG9tVG9vbHRpcCB9IGZyb20gJy4vQ3VzdG9tVG9vbHRpcCdcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lJ1xyXG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnLi4vc2hhcmVkL1Rvb2x0aXAnXHJcbmltcG9ydCB7IGNhbWVsQ2FzZVJlc2hhcGUsIGlzRmFsc3kgfSBmcm9tICcuLi9zaGFyZWQvVXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBFeHBvcnRUb0NzdiB9IGZyb20gJ2V4cG9ydC10by1jc3YnXHJcbmltcG9ydCBTbmFja0JhciBmcm9tICcuLi9zaGFyZWQvU25hY2tCYXInXHJcbmltcG9ydCB7IGxpYnJhcnkgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnXHJcbmltcG9ydCAqIGFzIEljb25zIGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucydcclxuXHJcbmltcG9ydCAnYWctZ3JpZC1jb21tdW5pdHkvZGlzdC9zdHlsZXMvYWctZ3JpZC5jc3MnXHJcbmltcG9ydCAnYWctZ3JpZC1jb21tdW5pdHkvZGlzdC9zdHlsZXMvYWctdGhlbWUtYmFsaGFtLWRhcmsuY3NzJ1xyXG5cclxuaW1wb3J0ICcuL0F1ZGl0TG9nLnNjc3MnXHJcblxyXG4vLyBCZWxvdyAzIGltcG9ydHMgdG8gc3VwcG9ydCBMb2NhbGl6YXRpb25cclxuaW1wb3J0IHsgdHJhbnNsYXRlQ29sdW1uRGVmcywgdHJhbnNsYXRlVGV4dCB9IGZyb20gJy4uL3NoYXJlZC9NZXRob2RzJ1xyXG5pbXBvcnQgeyBEb21haW5Db250ZXh0IH0gZnJvbSAnLi4vc2hhcmVkL2NvbnRleHQvQmFzaWNDb250ZXh0UHJvdmlkZXInXHJcblxyXG5jb25zdCBvcHRpb25zID0ge1xyXG4gIGZpbGVuYW1lOiAnQXVkaXRMb2cnXHJcbn1cclxuXHJcbmNvbnN0IGNzdkV4cG9ydGVyID0gbmV3IEV4cG9ydFRvQ3N2KG9wdGlvbnMpXHJcblxyXG4vLyBhZGRzIGFsbCB0aGUgc29saWQtc3ZnIGljb25zIGludG8gdGhlIGxpYnJhcnkgdG8gcHJldmVudCBlcGxpY2l0IGltcG9ydHNcclxuY29uc3QgaWNvbkxpc3QgPSBPYmplY3Qua2V5cyhJY29ucylcclxuICAuZmlsdGVyKChrZXkpID0+IGtleSAhPT0gJ2ZhcycgJiYga2V5ICE9PSAncHJlZml4JylcclxuICAubWFwKChpY29uKSA9PiBJY29uc1tpY29uXSlcclxubGlicmFyeS5hZGQoLi4uaWNvbkxpc3QpXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1ZGl0TG9nUHJvcHMge1xyXG4gIGRldmljZUlkOiBzdHJpbmcgfCBudWxsXHJcbiAgbXBzU2VydmVyOiBzdHJpbmcgfCBudWxsXHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXVkaXRMb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8QXVkaXRMb2dQcm9wcywgeyByb3dEYXRhOiBhbnksIGVycm9yTXNnOiBzdHJpbmcsIHZhbHVlOiBhbnksIGN1cnJlbnRQYWdlOiBOdW1iZXIsIHRvdGFsUGFnZXM6IE51bWJlciwgc2hvd1Rvb2x0aXA6IGJvb2xlYW4sIGlzRXhwb3J0aW5nOiBib29sZWFuLCBoYXNFeHBvcnRGYWlsZWQ6IGJvb2xlYW4sIHNuYWNrQmFyTWVzc2FnZTogU3RyaW5nLCBjb21wbGV0ZUF1ZGl0TG9nOiBhbnksIGRvd25sb2FkQ1NWOiBib29sZWFuIH0+IHtcclxuICBncmlkQXBpOiBhbnlcclxuICBncmlkQ29sdW1uQXBpOiBhbnlcclxuICBjb2x1bW5EZWZzOiBhbnlcclxuICBkaXNhYmxlTmV4dDogYm9vbGVhbiA9IGZhbHNlXHJcbiAgZGlzYWJsZVByZXY6IGJvb2xlYW4gPSB0cnVlXHJcbiAgZGlzYWJsZUdvVG9QYWdlOiBib29sZWFuID0gZmFsc2VcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IGFueSkge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLmNvbHVtbkRlZnMgPSBbXHJcbiAgICAgIGF1ZGl0bG9nQ2xvdW1uRGVmcy5pbml0aWF0b3IsXHJcbiAgICAgIGF1ZGl0bG9nQ2xvdW1uRGVmcy5hdWRpdGFwcCxcclxuICAgICAgYXVkaXRsb2dDbG91bW5EZWZzLmV2ZW50LFxyXG4gICAgICBhdWRpdGxvZ0Nsb3VtbkRlZnMubmV0YWRkcmVzcyxcclxuICAgICAgYXVkaXRsb2dDbG91bW5EZWZzLnRpbWUsXHJcbiAgICAgIGF1ZGl0bG9nQ2xvdW1uRGVmcy5leHN0clxyXG5cclxuICAgIF1cclxuICAgIHRoaXMuc3RhdGUgPSB7IHJvd0RhdGE6IFtdLCBlcnJvck1zZzogJycsIHZhbHVlOiAnJywgY3VycmVudFBhZ2U6IDAsIHRvdGFsUGFnZXM6IDAsIHNob3dUb29sdGlwOiBmYWxzZSwgaXNFeHBvcnRpbmc6IGZhbHNlLCBoYXNFeHBvcnRGYWlsZWQ6IGZhbHNlLCBzbmFja0Jhck1lc3NhZ2U6ICcnLCBjb21wbGV0ZUF1ZGl0TG9nOiBbXSwgZG93bmxvYWRDU1Y6IGZhbHNlIH1cclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdXBkYXRlZCBzdGFydCBpbmRleCBmb3IgdGhlIG5leHQgYXVkaXQgbG9nIHJlcXVlc3QgYmFzZWQgb24gdG90YWwgcm93cywgc3RhcnQgYW5kIGVuZCByb3cgaW5kZXhcclxuICBhZGp1c3RSb3dJbmRleCA9IChyb3d0b3RhbENudCwgZW5kSW5kZXgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKGVuZEluZGV4ID4gcm93dG90YWxDbnQpIHtcclxuICAgICAgcmV0dXJuIDFcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFicyhyb3d0b3RhbENudCAtIChlbmRJbmRleCAtIDEpKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTWFrZSB0aGUgc2VydmVyIHJlc3BvbnNlIGNvbXBhdGlibGUgZm9yIGRpc3BsYXlcclxuICB0cmFuc2Zvcm1SZXNwb25zZSA9IChhdWRpdFJlY29yZHMpOiBhbnkgPT4ge1xyXG4gICAgYXVkaXRSZWNvcmRzLmZvckVhY2goKHJlY29yZCkgPT4ge1xyXG4gICAgICByZWNvcmQubmV0QWRkcmVzcyA9IHJlY29yZC5uZXRBZGRyZXNzLnJlcGxhY2UoL1teXFxkLi1dL2csICcnKSAvLyBSZWdFeCB0byBrZWVwIG9ubHkgZGlnaXRzIGFuZCAuIGluIE5ldEFkZHJlc3NcclxuICAgICAgcmVjb3JkLnRpbWUgPSByZWNvcmQudGltZS5zdWJzdHJpbmcoMCwgcmVjb3JkLnRpbWUubGVuZ3RoIC0gNSlcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIGF1ZGl0UmVjb3Jkc1xyXG4gIH1cclxuXHJcbiAgLy8gRmV0Y2ggYXVkaXQgbG9ncyB1c2luZyBkZXZpY2UgaWQgYW5kIHN0YXJ0IGluZGV4LlxyXG4gIGZldGNoQXVkaXRMb2cgPSBhc3luYyAoaW5kZXgpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBtcHNLZXkgfSA9IHRoaXMuY29udGV4dC5kYXRhXHJcbiAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXBpa2V5OiAneHh4eHgnLFxyXG4gICAgICAgIG1ldGhvZDogJ0F1ZGl0TG9nJyxcclxuICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICBndWlkOiB0aGlzLnByb3BzLmRldmljZUlkLFxyXG4gICAgICAgICAgc3RhcnRJbmRleDogaW5kZXhcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIGNvbnN0IHNlcnZlcjogc3RyaW5nID0gdGhpcy5wcm9wcy5tcHNTZXJ2ZXIgIT0gbnVsbCA/IHRoaXMucHJvcHMubXBzU2VydmVyIDogJydcclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IEh0dHBDbGllbnQucG9zdChgaHR0cHM6Ly8ke3NlcnZlcn0vYW10YCwgYm9keSwgbXBzS2V5LCB0cnVlKVxyXG4gICAgICByZXR1cm4gZGF0YVxyXG4gICAgfSBjYXRjaCB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdBbiBlcnJvciBvY2N1cmVkJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uR3JpZFJlYWR5ID0gKHBhcmFtcyk6IGFueSA9PiB7XHJcbiAgICBsZXQgcm93dG90YWxDbnQ6IG51bWJlciA9IDBcclxuICAgIGxldCByb3d0b3RhbENudEZldGNoZWQ6IG51bWJlciA9IDBcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdTb3JyeSEgU29tZXRoaW5nIHdlbnQgd3JvbmcuIHRyeSBhZ2FpbiBsYXRlcidcclxuXHJcbiAgICB0aGlzLmdyaWRBcGkgPSBwYXJhbXMuYXBpXHJcbiAgICB0aGlzLmdyaWRDb2x1bW5BcGkgPSBwYXJhbXMuY29sdW1uQXBpXHJcbiAgICB0aGlzLmdyaWRBcGkuc2l6ZUNvbHVtbnNUb0ZpdCgpXHJcbiAgICBjb25zdCBkYXRhU291cmNlID0ge1xyXG4gICAgICByb3dDb3VudDogbnVsbCxcclxuICAgICAgZ2V0Um93czogKHBhcmFtcykgPT4ge1xyXG4gICAgICAgIHRoaXMuZ3JpZEFwaS5zaG93TG9hZGluZ092ZXJsYXkoKVxyXG4gICAgICAgIGlmIChyb3d0b3RhbENudEZldGNoZWQgPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuZmV0Y2hBdWRpdExvZyhwYXJhbXMuc3RhcnRSb3cpLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5yZWNvcmRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgIGRhdGEucmVjb3JkcyA9IHRoaXMudHJhbnNmb3JtUmVzcG9uc2UoZGF0YS5yZWNvcmRzLm1hcCgocmVjb3JkKSA9PiBjYW1lbENhc2VSZXNoYXBlKHJlY29yZCwgYXVkaXRMb2dEYXRhTW9kZWwpKSlcclxuICAgICAgICAgICAgICB0aGlzLmdyaWRBcGkuaGlkZU92ZXJsYXkoKVxyXG4gICAgICAgICAgICAgIHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2soZGF0YS5yZWNvcmRzLnJldmVyc2UoKSwgZGF0YS50b3RhbENudClcclxuICAgICAgICAgICAgICByb3d0b3RhbENudCA9IGRhdGEudG90YWxDbnRcclxuICAgICAgICAgICAgICByb3d0b3RhbENudEZldGNoZWQgPSByb3d0b3RhbENudCAtIDIwXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yTXNnOiBkYXRhLmVycm9yIH0pXHJcbiAgICAgICAgICAgICAgdGhpcy5ncmlkQXBpLmhpZGVPdmVybGF5KClcclxuICAgICAgICAgICAgICB0aGlzLmdyaWRBcGkuc2hvd05vUm93c092ZXJsYXkoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvck1zZzogZXJyb3JNZXNzYWdlIH0pXHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZEFwaS5oaWRlT3ZlcmxheSgpXHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZEFwaS5zaG93Tm9Sb3dzT3ZlcmxheSgpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByb3d0b3RhbENudEZldGNoZWQgPSB0aGlzLmFkanVzdFJvd0luZGV4KHJvd3RvdGFsQ250LCBwYXJhbXMuZW5kUm93KVxyXG5cclxuICAgICAgICAgIHRoaXMuZmV0Y2hBdWRpdExvZyhyb3d0b3RhbENudEZldGNoZWQpLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5yZWNvcmRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgIGRhdGEucmVjb3JkcyA9IHRoaXMudHJhbnNmb3JtUmVzcG9uc2UoZGF0YS5yZWNvcmRzLm1hcCgocmVjb3JkKSA9PiBjYW1lbENhc2VSZXNoYXBlKHJlY29yZCwgYXVkaXRMb2dEYXRhTW9kZWwpKSlcclxuICAgICAgICAgICAgICB0aGlzLmdyaWRBcGkuaGlkZU92ZXJsYXkoKVxyXG4gICAgICAgICAgICAgIGlmICh0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldFRvdGFsUGFnZXMoKSA9PT0gcGFyc2VJbnQodGhpcy5ncmlkQXBpLnBhZ2luYXRpb25HZXRDdXJyZW50UGFnZSgpKSArIDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSByb3d0b3RhbENudCAlIDEwXHJcbiAgICAgICAgICAgICAgICBpZiAocm93dG90YWxDbnQgJSAxMCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgZGF0YS5yZWNvcmRzID0gZGF0YS5yZWNvcmRzLnNsaWNlKDAsIHNpemUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2soZGF0YS5yZWNvcmRzLnJldmVyc2UoKSwgZGF0YS50b3RhbENudClcclxuICAgICAgICAgICAgICByb3d0b3RhbENudCA9IGRhdGEudG90YWxDbnRcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JNc2c6IGRhdGEuZXJyb3IgfSlcclxuICAgICAgICAgICAgICB0aGlzLmdyaWRBcGkuaGlkZU92ZXJsYXkoKVxyXG4gICAgICAgICAgICAgIHRoaXMuZ3JpZEFwaS5zaG93Tm9Sb3dzT3ZlcmxheSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yTXNnOiBlcnJvck1lc3NhZ2UgfSlcclxuICAgICAgICAgICAgdGhpcy5ncmlkQXBpLmhpZGVPdmVybGF5KClcclxuICAgICAgICAgICAgdGhpcy5ncmlkQXBpLnNob3dOb1Jvd3NPdmVybGF5KClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXJhbXMuYXBpLnNldERhdGFzb3VyY2UoZGF0YVNvdXJjZSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICogTmF2aWdhdGVzIHRvIGFsbCB0aGUgcGFnZXMgb2YgYWctZ3JpZCBhbmQgZmV0Y2hlcyBhdWRpdCBsb2dzIGZyb20gdGhlIHNldmVyXHJcbiAgICAgKiBPbmNlIGFsbCBkYXRhIGlzIGxvYWRlZCBpbiB0aGUgZ3JpZCwgZW5hYmxlcyB0aGUgcGFnaW5hdGlvbiBjb250cm9scyBhbmQgZXhwb3J0cyB0aGUgZ3JpZCBkYXRhXHJcbiAgICAgKiB0byBhIENTViBmaWxlXHJcbiAgICAgKi9cclxuICBmZXRjaENvbXBsZXRlQXVkaXRMb2cgPSBhc3luYyAoKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgIGNvbnN0IHJvd3RvdGFsQ250ID0gdGhpcy5ncmlkQXBpLnBhZ2luYXRpb25HZXRSb3dDb3VudCgpXHJcbiAgICBsZXQgY29tcGxldGVBdWRpdExvZyA9IFt7IGF1ZGl0QXBwSWQ6ICdSb2xlIElEJywgZXZlbnRJZDogJ0V2ZW50IElEJywgaW5pdGlhdG9yOiAnSW5pdGlhdG9yJywgYXVkaXRBcHA6ICdSb2xlIE5hbWUnLCBldmVudDogJ0V2ZW50JywgbmV0QWRkcmVzczogJ05ldHdvcmsgQWRkcmVzcycsIHRpbWU6ICdEZXZpY2UgVGltZShVVEMpJywgZXhTdHI6ICdFdmVudCBEZXRhaWxzJyB9XVxyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZ3JpZEFwaS5wYWdpbmF0aW9uR2V0VG90YWxQYWdlcygpOyBpbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IHJvd3NGZXRjaGVkOiBudW1iZXIgPSAoKGluZGV4ICsgMSkgKiB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldFBhZ2VTaXplKCkgLSAxKVxyXG4gICAgICBjb25zdCBpbmRleE51bWJlcjogbnVtYmVyID0gKGluZGV4ID09PSAwKSA/IDAgOiAoaW5kZXggKyAxICE9PSB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldFRvdGFsUGFnZXMoKSkgPyByb3d0b3RhbENudCAtIHJvd3NGZXRjaGVkIDogMVxyXG4gICAgICBsZXQgbG9ncyA9IGF3YWl0IHRoaXMuZmV0Y2hBdWRpdExvZyhpbmRleE51bWJlcilcclxuICAgICAgaWYgKGxvZ3MucmVjb3JkcyA9PT0gdW5kZWZpbmVkIHx8IGlzRmFsc3kobG9ncy5lcnJvcikpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGhhc0V4cG9ydEZhaWxlZDogdHJ1ZSxcclxuICAgICAgICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcclxuICAgICAgICAgIHNuYWNrQmFyTWVzc2FnZTogJ1NvbWV0aGluZyB3ZW50IHdyb25nISBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLidcclxuICAgICAgICB9KVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGhhc0V4cG9ydEZhaWxlZDogZmFsc2VcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgNDAwMClcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpbmRleE51bWJlciA9PT0gMSkge1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSByb3d0b3RhbENudCAlIDEwXHJcbiAgICAgICAgbG9ncy5yZWNvcmRzID0gbG9ncy5yZWNvcmRzLnNsaWNlKDAsIHNpemUpXHJcbiAgICAgIH1cclxuICAgICAgbG9ncyA9IGxvZ3MucmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4gY2FtZWxDYXNlUmVzaGFwZShyZWNvcmQsIGF1ZGl0TG9nRGF0YU1vZGVsKSlcclxuICAgICAgY29tcGxldGVBdWRpdExvZyA9IGNvbXBsZXRlQXVkaXRMb2cuY29uY2F0KHRoaXMudHJhbnNmb3JtUmVzcG9uc2UobG9ncykucmV2ZXJzZSgpKVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGlzRXhwb3J0aW5nOiBmYWxzZSxcclxuICAgICAgY29tcGxldGVBdWRpdExvZzogY29tcGxldGVBdWRpdExvZyxcclxuICAgICAgZG93bmxvYWRDU1Y6IHRydWVcclxuICAgIH0pXHJcbiAgICBjc3ZFeHBvcnRlci5nZW5lcmF0ZUNzdih0aGlzLnN0YXRlLmNvbXBsZXRlQXVkaXRMb2cpXHJcbiAgfVxyXG5cclxuICAvLyBoaWRlL3Nob3cgY29sdW1ucyBvbiB3aW5kb3cgcmVzaXplKGF2b2lkIGhvcml6b250YWwgc2Nyb2xsIGZvciBhZy1ncmlkKVxyXG4gIG9uR3JpZFNpemVDaGFuZ2VkID0gKHBhcmFtcyk6IGFueSA9PiB7XHJcbiAgICBjb25zdCBncmlkV2lkdGg6IGFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdncmlkLXdyYXBwZXInKT8ub2Zmc2V0V2lkdGhcclxuICAgIGNvbnN0IGNvbHVtbnNUb1Nob3c6IGFueSA9IFtdXHJcbiAgICBjb25zdCBjb2x1bW5zVG9IaWRlOiBhbnkgPSBbXVxyXG4gICAgbGV0IHRvdGFsQ29sc1dpZHRoID0gMFxyXG4gICAgY29uc3QgYWxsQ29sdW1ucyA9IHBhcmFtcy5jb2x1bW5BcGkuZ2V0QWxsQ29sdW1ucygpXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbENvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgY29sdW1uID0gYWxsQ29sdW1uc1tpXVxyXG4gICAgICB0b3RhbENvbHNXaWR0aCArPSBwYXJzZUludChjb2x1bW4uZ2V0TWluV2lkdGgoKSlcclxuICAgICAgaWYgKHRvdGFsQ29sc1dpZHRoID4gZ3JpZFdpZHRoKSB7XHJcbiAgICAgICAgY29sdW1uc1RvSGlkZS5wdXNoKGNvbHVtbi5jb2xJZClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb2x1bW5zVG9TaG93LnB1c2goY29sdW1uLmNvbElkKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXJhbXMuY29sdW1uQXBpLnNldENvbHVtbnNWaXNpYmxlKGNvbHVtbnNUb1Nob3csIHRydWUpXHJcbiAgICBwYXJhbXMuY29sdW1uQXBpLnNldENvbHVtbnNWaXNpYmxlKGNvbHVtbnNUb0hpZGUsIGZhbHNlKVxyXG4gICAgcGFyYW1zLmFwaS5zaXplQ29sdW1uc1RvRml0KClcclxuICB9XHJcblxyXG4gIC8vIFRvZ2dsZSB0aGUgcGFnaW5hdGlvbiBidXR0b25zIG9uIGNsaWNrXHJcbiAgdG9nZ2xlUGFnaW5hdGlvbkJ1dHRvbnMgPSAoZGlyZWN0aW9uU3RyaW5nOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgIHN3aXRjaCAoZGlyZWN0aW9uU3RyaW5nKSB7XHJcbiAgICAgIGNhc2UgJ2ZpcnN0JzpcclxuICAgICAgICB0aGlzLmRpc2FibGVQcmV2ID0gdHJ1ZVxyXG4gICAgICAgIHRoaXMuZGlzYWJsZU5leHQgPSBmYWxzZVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ25leHQnOlxyXG4gICAgICAgIHRoaXMuZGlzYWJsZVByZXYgPSBmYWxzZVxyXG4gICAgICAgIGlmICh0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldFRvdGFsUGFnZXMoKSA9PT0gcGFyc2VJbnQodGhpcy5ncmlkQXBpLnBhZ2luYXRpb25HZXRDdXJyZW50UGFnZSgpKSArIDEpIHtcclxuICAgICAgICAgIHRoaXMuZGlzYWJsZU5leHQgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ3ByZXYnOlxyXG4gICAgICAgIHRoaXMuZGlzYWJsZU5leHQgPSBmYWxzZVxyXG4gICAgICAgIGlmICh0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldEN1cnJlbnRQYWdlKCkgPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuZGlzYWJsZVByZXYgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ2xhc3QnOlxyXG4gICAgICAgIHRoaXMuZGlzYWJsZU5leHQgPSB0cnVlXHJcbiAgICAgICAgdGhpcy5kaXNhYmxlUHJldiA9IGZhbHNlXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnZnJvbWdvdG8nOlxyXG4gICAgICAgIHRoaXMuZGlzYWJsZU5leHQgPSBmYWxzZVxyXG4gICAgICAgIHRoaXMuZGlzYWJsZVByZXYgPSBmYWxzZVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBhZy1ncmlkIHBhZ2luYXRpb24gYXBpXHJcbiAgb25QYWdpbmF0aW9uQ2hhbmdlZCA9ICgpOiB2b2lkID0+IHtcclxuICAgIGlmIChpc0ZhbHN5KHRoaXMuZ3JpZEFwaSkpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VycmVudFBhZ2U6IHBhcnNlSW50KHRoaXMuZ3JpZEFwaS5wYWdpbmF0aW9uR2V0Q3VycmVudFBhZ2UoKSkgKyAxLFxyXG4gICAgICAgIHRvdGFsUGFnZXM6IHRoaXMuZ3JpZEFwaS5wYWdpbmF0aW9uR2V0VG90YWxQYWdlcygpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyB0YWtlIHRoZSB1c2VyIHRvIHNwZWNpZmljIHBhZ2Ugb24gdGhlIGFnLWdyaWQsIGFzIHBhZ2UgaW5kZXggc3RhcnRzIGZyb20gMCwgd2UgbmVlZCB0byBkZWNyZW1lbnQgdGhlIGlucHV0IHZhbHVlIGJ5IDFcclxuICBnb1RvUGFnZSA9ICgpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuZ3JpZEFwaS5wYWdpbmF0aW9uR29Ub1BhZ2UodGhpcy5zdGF0ZS52YWx1ZSAtIDEpXHJcbiAgICBjb25zdCBwYWdlTnVtYmVyOiBudW1iZXIgPSBwYXJzZUludCh0aGlzLnN0YXRlLnZhbHVlKVxyXG4gICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgIGNhc2UgKHBhZ2VOdW1iZXIgPD0gMSk6XHJcbiAgICAgICAgdGhpcy50b2dnbGVQYWdpbmF0aW9uQnV0dG9ucygnZmlyc3QnKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgKHBhZ2VOdW1iZXIgPiAxICYmIHBhZ2VOdW1iZXIgPCB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdldFRvdGFsUGFnZXMoKSk6XHJcbiAgICAgICAgdGhpcy50b2dnbGVQYWdpbmF0aW9uQnV0dG9ucygnZnJvbWdvdG8nKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgKHBhZ2VOdW1iZXIgPj0gdGhpcy5ncmlkQXBpLnBhZ2luYXRpb25HZXRUb3RhbFBhZ2VzKCkpOlxyXG4gICAgICAgIHRoaXMudG9nZ2xlUGFnaW5hdGlvbkJ1dHRvbnMoJ2xhc3QnKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiBjdXN0b20gcGFnaW5hdGlvbiBhY3Rpb24gLS0gc3RhcnQgKi9cclxuICBvbkJ0Rmlyc3QgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdvVG9GaXJzdFBhZ2UoKVxyXG4gICAgdGhpcy50b2dnbGVQYWdpbmF0aW9uQnV0dG9ucygnZmlyc3QnKVxyXG4gIH1cclxuXHJcbiAgb25CdExhc3QgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdvVG9MYXN0UGFnZSgpXHJcbiAgICB0aGlzLnRvZ2dsZVBhZ2luYXRpb25CdXR0b25zKCdsYXN0JylcclxuICB9XHJcblxyXG4gIG9uQnROZXh0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5ncmlkQXBpLnBhZ2luYXRpb25Hb1RvTmV4dFBhZ2UoKVxyXG4gICAgdGhpcy50b2dnbGVQYWdpbmF0aW9uQnV0dG9ucygnbmV4dCcpXHJcbiAgfVxyXG5cclxuICBvbkJ0UHJldmlvdXMgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmdyaWRBcGkucGFnaW5hdGlvbkdvVG9QcmV2aW91c1BhZ2UoKVxyXG4gICAgdGhpcy50b2dnbGVQYWdpbmF0aW9uQnV0dG9ucygncHJldicpXHJcbiAgfVxyXG5cclxuICBvbkJ0RXhwb3J0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSgocHJvcHMsIHN0YXRlKSA9PiB7XHJcbiAgICAgIHJldHVybiB7IGlzRXhwb3J0aW5nOiB0cnVlIH1cclxuICAgIH0pXHJcbiAgICB0aGlzLmZldGNoQ29tcGxldGVBdWRpdExvZygpLmNhdGNoKCgpID0+IGNvbnNvbGUuaW5mbygnZXJyb3Igb2NjdXJlZCcpKVxyXG4gIH1cclxuICAvKiBjdXN0b20gcGFnaW5hdGlvbiBhY3Rpb24gLS0gZW5kICovXHJcblxyXG4gIC8vIHNldCB1c2VyIGVudGVyZWQgcGFnZSBudW1iZXIgdG8gY29tcG9uZW50IHN0YXRlXHJcbiAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZS5yZXBsYWNlKC9bXlxcZC1dL2csICcnKSB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgY29uc3Qgbm9Sb3dzT3ZlcmxheVRlbXBsYXRlID0gYDxkaXYgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCIsIGZvbnRTaXplOiBcIjI1cHhcIiwgYmFja2dyb3VuZENvbG9yOiBcIiNlZDY0NWFcIn19PjxzcGFuIHN0eWxlPVwicGFkZGluZzogMTBweDsgYm9yZGVyOiAycHggc29saWQgIzQ0NDsgYmFja2dyb3VuZDogbGlnaHRnb2xkZW5yb2R5ZWxsb3c7IGNvbG9yOiByZWQ7XCI+JHt0aGlzLnN0YXRlLmVycm9yTXNnfTwvc3Bhbj48L2Rpdj5gXHJcbiAgICBjb25zdCBkZWZhdWx0Q29sRGVmID0ge1xyXG4gICAgICB0b29sdGlwQ29tcG9uZW50OiAnY3VzdG9tVG9vbHRpcCdcclxuICAgIH1cclxuICAgIGNvbnN0IHRvb2x0aXBTdHlsZSA9IHtcclxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgIGJvdHRvbTogJzEwMCUnLFxyXG4gICAgICBsZWZ0OiAnMjRweCcsXHJcbiAgICAgIHdpZHRoOiAnMTAwcHgnLFxyXG4gICAgICBtYXJnaW46ICcwcHgnXHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZXdvcmtDb21wb25lbnQgPSB7IGFnQ29sdW1uSGVhZGVyOiBDdXN0b21IZWFkZXIsIGN1c3RvbVRvb2x0aXA6IEN1c3RvbVRvb2x0aXAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIHshdGhpcy5zdGF0ZS5pc0V4cG9ydGluZyA/IDxkaXY+XHJcbiAgICAgICAgICA8ZGl2IGlkPVwiZ3JpZC13cmFwcGVyXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMzc1cHgnIH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFnLXRoZW1lLWJhbGhhbS1kYXJrXCIgc3R5bGU9e3sgaGVpZ2h0OiAnMTAwJScsIHdpZHRoOiAnMTAwJScgfX0+XHJcbiAgICAgICAgICAgICAgPEFnR3JpZFJlYWN0XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5EZWZzPXt0cmFuc2xhdGVDb2x1bW5EZWZzKHRoaXMuY29sdW1uRGVmcyl9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29sRGVmPXtkZWZhdWx0Q29sRGVmfVxyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbj17dHJ1ZX1cclxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25QYWdlU2l6ZT17MTB9XHJcbiAgICAgICAgICAgICAgICBjYWNoZUJsb2NrU2l6ZT17MTB9XHJcbiAgICAgICAgICAgICAgICByb3dNb2RlbFR5cGU9eydpbmZpbml0ZSd9XHJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZUluaXRpYWxSb3dDb3VudD17MX1cclxuICAgICAgICAgICAgICAgIG9uR3JpZFJlYWR5PXt0aGlzLm9uR3JpZFJlYWR5fVxyXG4gICAgICAgICAgICAgICAgcm93RGF0YT17dGhpcy5zdGF0ZS5yb3dEYXRhfVxyXG4gICAgICAgICAgICAgICAgb3ZlcmxheU5vUm93c1RlbXBsYXRlPXtub1Jvd3NPdmVybGF5VGVtcGxhdGV9XHJcbiAgICAgICAgICAgICAgICBvblBhZ2luYXRpb25DaGFuZ2VkPXt0aGlzLm9uUGFnaW5hdGlvbkNoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICBzdXBwcmVzc1BhZ2luYXRpb25QYW5lbD17dHJ1ZX1cclxuICAgICAgICAgICAgICAgIHN1cHByZXNzU2Nyb2xsT25OZXdEYXRhPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgb25HcmlkU2l6ZUNoYW5nZWQ9e3RoaXMub25HcmlkU2l6ZUNoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICBmcmFtZXdvcmtDb21wb25lbnRzPXtmcmFtZXdvcmtDb21wb25lbnR9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFnR3JpZC1mb290ZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZy1ncmlkLWZvb3Rlci1jZWxsIGFsaWduLWxlZnRcIj5cclxuICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zaG93VG9vbHRpcCAmJiA8VG9vbHRpcCBtZXNzYWdlPSdFeHBvcnRzIG9ubHkgY2FjaGVkIGVudHJpZXMnIHN0eWxlcz17dG9vbHRpcFN0eWxlfSAvPn1cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nZXhwb3J0LXRvLWNzdicgb25DbGljaz17dGhpcy5vbkJ0RXhwb3J0fSA+PEZvbnRBd2Vzb21lSWNvbiBpY29uPSdmaWxlLWV4cG9ydCcvPnt0cmFuc2xhdGVUZXh0KCdhdWRpdExvZy5ncmlkLmZvb3Rlci5leHBvcnR0b2Nzdi50aXRsZScpfVxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZy1ncmlkLWZvb3Rlci1jZWxsIGFnR3JpZC1QYWdpbml0aW9uIGFsaWduLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMub25CdEZpcnN0fSBkaXNhYmxlZD17dGhpcy5kaXNhYmxlUHJldn0+PEZvbnRBd2Vzb21lSWNvbiBpY29uPSdhbmdsZS1kb3VibGUtbGVmdCcgLz48L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXt0aGlzLm9uQnRQcmV2aW91c30gZGlzYWJsZWQ9e3RoaXMuZGlzYWJsZVByZXZ9PjxGb250QXdlc29tZUljb24gaWNvbj0nYW5nbGUtbGVmdCcgLz48L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8c3Bhbj57dHJhbnNsYXRlVGV4dCgnYXVkaXRMb2cuZ3JpZC5mb290ZXIucGFnaW5hdGlvbi50ZXh0MScpfSB7dGhpcy5zdGF0ZS5jdXJyZW50UGFnZX0ge3RyYW5zbGF0ZVRleHQoJ2F1ZGl0TG9nLmdyaWQuZm9vdGVyLnBhZ2luYXRpb24udGV4dDInKX0ge3RoaXMuc3RhdGUudG90YWxQYWdlc308L3NwYW4+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5vbkJ0TmV4dH0gZGlzYWJsZWQ9e3RoaXMuZGlzYWJsZU5leHR9PjxGb250QXdlc29tZUljb24gaWNvbj0nYW5nbGUtcmlnaHQnIC8+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5vbkJ0TGFzdH0gZGlzYWJsZWQ9e3RoaXMuZGlzYWJsZU5leHR9PjxGb250QXdlc29tZUljb24gaWNvbj0nYW5nbGUtZG91YmxlLXJpZ2h0JyAvPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZy1ncmlkLWZvb3Rlci1jZWxsIGFsaWduLXJpZ2h0IGdvLXRvLXBhZ2Utc2VjdGlvblwiPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5nb1RvUGFnZX0gY2xhc3NOYW1lPSdnby10by1wYWdlJz57dHJhbnNsYXRlVGV4dCgnYXVkaXRMb2cuZ3JpZC5mb290ZXIuZ290b3BhZ2UudGl0bGUnKX08L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJwYWdpbmF0aW9uLXBhZ2VcIiBjbGFzc05hbWU9XCJwYWdpbmF0aW9uLWlucHV0XCIgcGxhY2Vob2xkZXI9J3BhZ2UgIycgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gdHlwZT1cInRleHRcIiBuYW1lPVwicGFnZV9fbnVtXCIgZGlzYWJsZWQ9e3RoaXMuZGlzYWJsZUdvVG9QYWdlfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PiA6IDxkaXYgY2xhc3NOYW1lPVwib3ZlcmxheVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdmVybGF5X19pbm5lclwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJleHBvcnQtbG9hZGluZy10ZXh0XCI+UGxlYXNlIHdhaXQgd2hpbGUgd2UgcHJvY2VzcyB0aGUgcmVxdWVzdDwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibG9hZGVyXCI+PC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgIHt0aGlzLnN0YXRlLmhhc0V4cG9ydEZhaWxlZCAmJiA8U25hY2tCYXIgbWVzc2FnZT17dGhpcy5zdGF0ZS5zbmFja0Jhck1lc3NhZ2V9IHR5cGU9JycgLz59XHJcbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5BdWRpdExvZy5jb250ZXh0VHlwZSA9IERvbWFpbkNvbnRleHRcclxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub29sdGlwLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudG9vbHRpcHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZTthbGlnbi1jb250ZW50OmNlbnRlcn0udG9vbHRpcCAudG9vbHRpcF9fdGV4dHt3aWR0aDoyMDBweDt6LWluZGV4OjE7d2hpdGUtc3BhY2U6bm9ybWFsO21hcmdpbjoxMHB4IDEwcHggMTBweCAxMHB4O2JhY2tncm91bmQ6I2ZmZjtjb2xvcjojMjczOTRmO3BhZGRpbmc6NHB4IDhweDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxLjQ7bWluLXdpZHRoOjEwMHB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6NnB4O2JvcmRlcjoxcHggc29saWQgIzAwMDt0cmFuc2l0aW9uOm9wYWNpdHkgMXN9LnRvb2x0aXAgLnRvb2x0aXBfX3RleHQ6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTVweDtib3JkZXItd2lkdGg6NXB4O2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6I2ZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH0uYWctcm9vdC13cmFwcGVye292ZXJmbG93OnZpc2libGUgIWltcG9ydGFudH0uYWctcm9vdHtvdmVyZmxvdzp2aXNpYmxlICFpbXBvcnRhbnR9LmFnLWhlYWRlcntvdmVyZmxvdzp2aXNpYmxlICFpbXBvcnRhbnR9LmFnLWhlYWRlci12aWV3cG9ydHtvdmVyZmxvdzp2aXNpYmxlICFpbXBvcnRhbnR9XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ3VzdG9tVG9vbHRpcC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmN1c3RvbS10b29sdGlwe3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlcjoxcHggc29saWQgIzY0OTVlZDtjb2xvcjojMDAwO3BvaW50ZXItZXZlbnRzOm5vbmU7dHJhbnNpdGlvbjpvcGFjaXR5IDFzO2JhY2tncm91bmQtY29sb3I6I2ZmZn0uY3VzdG9tLXRvb2x0aXAuYWctdG9vbHRpcC1oaWRpbmd7b3BhY2l0eTowfS5jdXN0b20tdG9vbHRpcCBwe21hcmdpbjo1cHg7d2hpdGUtc3BhY2U6bm93cmFwfVwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhZy1ncmlkLWNvbW11bml0eS9kaXN0L3N0eWxlcy9hZy10aGVtZS1iYWxoYW0tZGFyay5jc3NcIik7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BdWRpdExvZy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmFnR3JpZC1mb290ZXJ7YmFja2dyb3VuZDojMmQzNDM2O2hlaWdodDoyNnB4fS5hZ0dyaWQtZm9vdGVyIC5hZy1ncmlkLWZvb3Rlci1jZWxse3dpZHRoOjMzJTtkaXNwbGF5OmlubGluZS1ibG9ja30ubG9hZGVye2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjc1cHg7aGVpZ2h0Ojc1cHg7bGVmdDo0NSU7dG9wOjM1JTtib3JkZXI6MTBweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LC4zKTtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItdG9wLWNvbG9yOiNmZmY7YW5pbWF0aW9uOnNwaW4gMXMgZWFzZS1pbi1vdXQgaW5maW5pdGU7LXdlYmtpdC1hbmltYXRpb246c3BpbiAxcyBlYXNlLWluLW91dCBpbmZpbml0ZX1Aa2V5ZnJhbWVzIHNwaW57dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUAtd2Via2l0LWtleWZyYW1lcyBzcGlue3Rvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX0uYWxpZ24tbGVmdHt0ZXh0LWFsaWduOmxlZnR9LmFsaWduLWNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlcn0uYWxpZ24tcmlnaHR7dGV4dC1hbGlnbjpyaWdodH0uZXhwb3J0LXRvLWNzdnthbGlnbi1jb250ZW50OmxlZnQ7Y29sb3I6I2Y1ZjVmNTtiYWNrZ3JvdW5kOiMyZDM0MzY7Ym9yZGVyOnRyYW5zcGFyZW50O2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0OjQwMDtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZjt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2N1cnNvcjpwb2ludGVyfS5kYXRhLWV4cG9ydC1pbmZvLWljb257Y29sb3I6I2QwZDBkMDtwYWRkaW5nLWxlZnQ6NXB4O3BhZGRpbmctdG9wOjRweDtmb250LXNpemU6MTJweH0uYWdHcmlkLVBhZ2luaXRpb257ZGlzcGxheTppbmxpbmUtYmxvY2t9LmFnR3JpZC1QYWdpbml0aW9uIGJ1dHRvbnthbGlnbi1jb250ZW50OnJpZ2h0O2NvbG9yOiNmNWY1ZjU7YmFja2dyb3VuZDojMmQzNDM2O2JvcmRlcjp0cmFuc3BhcmVudDtmb250LXNpemU6MTJweDttYXJnaW46MnB4O2ZvbnQtd2VpZ2h0OjQwMDtjdXJzb3I6cG9pbnRlcjtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZn0uYWdHcmlkLVBhZ2luaXRpb24gYnV0dG9uOmRpc2FibGVke2NvbG9yOiM4YzhjOGM7cG9pbnRlci1ldmVudHM6bm9uZX0uYWdHcmlkLVBhZ2luaXRpb24gc3BhbnthbGlnbi1jb250ZW50OnJpZ2h0O2NvbG9yOiNmNWY1ZjU7YmFja2dyb3VuZDojMmQzNDM2O2JvcmRlcjp0cmFuc3BhcmVudDtmb250LXNpemU6MTJweDttYXJnaW46MnB4O2ZvbnQtd2VpZ2h0OjQwMDtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZn0uZ28tdG8tcGFnZXtwYWRkaW5nLXRvcDoycHg7cGFkZGluZy1yaWdodDo0cHg7YWxpZ24tY29udGVudDpyaWdodDtjb2xvcjojZjVmNWY1O2JhY2tncm91bmQ6IzJkMzQzNjtib3JkZXI6bm9uZSAhaW1wb3J0YW50O2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0OjQwMDtjdXJzb3I6cG9pbnRlcjtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZjtvdXRsaW5lOm5vbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0ucGFnaW5hdGlvbi1pbnB1dHtmbG9hdDpyaWdodDt3aWR0aDo3NXB4O21hcmdpbi10b3A6MnB4O2ZvbnQtc2l6ZToxMnB4O2JhY2tncm91bmQtY29sb3I6IzI2MmMyZTtjb2xvcjojZjVmNWY1O2JvcmRlcjoxcHggc29saWQgI2Y1ZjVmNTtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxPeHlnZW4tU2FucyxVYnVudHUsQ2FudGFyZWxsLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZn06OnBsYWNlaG9sZGVye2NvbG9yOiNmNWY1ZjV9Lm92ZXJsYXl7bWFyZ2luLXRvcDo2NXB4O21hcmdpbi1sZWZ0OjhweDtsZWZ0OjA7dG9wOjA7d2lkdGg6OTguOCU7aGVpZ2h0OjQwMHB4O3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6IzAwMH0ub3ZlcmxheV9faW5uZXJ7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjQwMHB4O3Bvc2l0aW9uOmFic29sdXRlfS5sb2FkZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NzVweDtoZWlnaHQ6NzVweDtsZWZ0OjQ1JTt0b3A6MzUlO2JvcmRlcjoxMHB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsLjMpO2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlci10b3AtY29sb3I6I2ZmZjthbmltYXRpb246c3BpbiAxcyBlYXNlLWluLW91dCBpbmZpbml0ZTstd2Via2l0LWFuaW1hdGlvbjpzcGluIDFzIGVhc2UtaW4tb3V0IGluZmluaXRlfS5leHBvcnQtbG9hZGluZy10ZXh0e2xlZnQ6MzglO3RvcDoyNSU7Y29sb3I6I2ZmZjtwb3NpdGlvbjphYnNvbHV0ZX1Aa2V5ZnJhbWVzIHNwaW57MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzIwcHgpYW5kIChtYXgtd2lkdGg6IDQ3OXB4KXsuYWdHcmlkLWZvb3RlcntoZWlnaHQ6NTBweH0uYWdHcmlkLWZvb3RlciAuYWctZ3JpZC1mb290ZXItY2VsbHt3aWR0aDo1MCV9LmFnR3JpZC1mb290ZXIgLmFnR3JpZC1QYWdpbml0aW9ue3RleHQtYWxpZ246cmlnaHR9LmFnR3JpZC1mb290ZXIgLmdvLXRvLXBhZ2Utc2VjdGlvbnttYXJnaW46MHB4IDI1JTt0ZXh0LWFsaWduOmNlbnRlcn0uYWdHcmlkLWZvb3RlciAuZ28tdG8tcGFnZS1zZWN0aW9uIC5wYWdpbmF0aW9uLWlucHV0e2Zsb2F0Om5vbmV9Lm92ZXJsYXkgLmV4cG9ydC1sb2FkaW5nLXRleHR7bGVmdDoxNCV9Lm92ZXJsYXkgLmxvYWRlcnt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O2xlZnQ6MzglfX1cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==